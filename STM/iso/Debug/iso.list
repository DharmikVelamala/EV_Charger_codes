
iso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af4  08003af4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003afc  08003afc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000078  08003b7c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003b7c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d827  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de2  00000000  00000000  0002d8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00030300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022443  00000000  00000000  00030e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6ad  00000000  00000000  000532b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0c54  00000000  00000000  00062960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001335b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  00133604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a64 	.word	0x08003a64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08003a64 	.word	0x08003a64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b974 	b.w	8000938 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468e      	mov	lr, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14d      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000676:	428a      	cmp	r2, r1
 8000678:	4694      	mov	ip, r2
 800067a:	d969      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b152      	cbz	r2, 8000698 <__udivmoddi4+0x30>
 8000682:	fa01 f302 	lsl.w	r3, r1, r2
 8000686:	f1c2 0120 	rsb	r1, r2, #32
 800068a:	fa20 f101 	lsr.w	r1, r0, r1
 800068e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000692:	ea41 0e03 	orr.w	lr, r1, r3
 8000696:	4094      	lsls	r4, r2
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	0c21      	lsrs	r1, r4, #16
 800069e:	fbbe f6f8 	udiv	r6, lr, r8
 80006a2:	fa1f f78c 	uxth.w	r7, ip
 80006a6:	fb08 e316 	mls	r3, r8, r6, lr
 80006aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ae:	fb06 f107 	mul.w	r1, r6, r7
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80006be:	f080 811f 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 811c 	bls.w	8000900 <__udivmoddi4+0x298>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 f707 	mul.w	r7, r0, r7
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x92>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ec:	f080 810a 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	f240 8107 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fe:	1be4      	subs	r4, r4, r7
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa4>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xc2>
 8000716:	2d00      	cmp	r5, #0
 8000718:	f000 80ef 	beq.w	80008fa <__udivmoddi4+0x292>
 800071c:	2600      	movs	r6, #0
 800071e:	e9c5 0100 	strd	r0, r1, [r5]
 8000722:	4630      	mov	r0, r6
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f683 	clz	r6, r3
 800072e:	2e00      	cmp	r6, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80f9 	bhi.w	800092e <__udivmoddi4+0x2c6>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	469e      	mov	lr, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa4>
 800074a:	e9c5 4e00 	strd	r4, lr, [r5]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa4>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8092 	bne.w	8000882 <__udivmoddi4+0x21a>
 800075e:	eba1 010c 	sub.w	r1, r1, ip
 8000762:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000766:	fa1f fe8c 	uxth.w	lr, ip
 800076a:	2601      	movs	r6, #1
 800076c:	0c20      	lsrs	r0, r4, #16
 800076e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000772:	fb07 1113 	mls	r1, r7, r3, r1
 8000776:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	4288      	cmp	r0, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0101 	adds.w	r1, ip, r1
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	4288      	cmp	r0, r1
 800078e:	f200 80cb 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 8000792:	4643      	mov	r3, r8
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f7 	udiv	r0, r1, r7
 800079c:	fb07 1110 	mls	r1, r7, r0, r1
 80007a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007a4:	fb0e fe00 	mul.w	lr, lr, r0
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80bb 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007bc:	4608      	mov	r0, r1
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79c      	b.n	8000702 <__udivmoddi4+0x9a>
 80007c8:	f1c6 0720 	rsb	r7, r6, #32
 80007cc:	40b3      	lsls	r3, r6
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa20 f407 	lsr.w	r4, r0, r7
 80007da:	fa01 f306 	lsl.w	r3, r1, r6
 80007de:	431c      	orrs	r4, r3
 80007e0:	40f9      	lsrs	r1, r7
 80007e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007e6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ee:	0c20      	lsrs	r0, r4, #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fb09 1118 	mls	r1, r9, r8, r1
 80007f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000800:	4288      	cmp	r0, r1
 8000802:	fa02 f206 	lsl.w	r2, r2, r6
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	4288      	cmp	r0, r1
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4461      	add	r1, ip
 8000820:	1a09      	subs	r1, r1, r0
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb1 f0f9 	udiv	r0, r1, r9
 8000828:	fb09 1110 	mls	r1, r9, r0, r1
 800082c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000830:	fb00 fe0e 	mul.w	lr, r0, lr
 8000834:	458e      	cmp	lr, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	458e      	cmp	lr, r1
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4461      	add	r1, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9402 	umull	r9, r4, r0, r2
 8000852:	eba1 010e 	sub.w	r1, r1, lr
 8000856:	42a1      	cmp	r1, r4
 8000858:	46c8      	mov	r8, r9
 800085a:	46a6      	mov	lr, r4
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	b15d      	cbz	r5, 800087a <__udivmoddi4+0x212>
 8000862:	ebb3 0208 	subs.w	r2, r3, r8
 8000866:	eb61 010e 	sbc.w	r1, r1, lr
 800086a:	fa01 f707 	lsl.w	r7, r1, r7
 800086e:	fa22 f306 	lsr.w	r3, r2, r6
 8000872:	40f1      	lsrs	r1, r6
 8000874:	431f      	orrs	r7, r3
 8000876:	e9c5 7100 	strd	r7, r1, [r5]
 800087a:	2600      	movs	r6, #0
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	fa21 f303 	lsr.w	r3, r1, r3
 8000890:	4091      	lsls	r1, r2
 8000892:	4301      	orrs	r1, r0
 8000894:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	fbb3 f0f7 	udiv	r0, r3, r7
 80008a0:	fb07 3610 	mls	r6, r7, r0, r3
 80008a4:	0c0b      	lsrs	r3, r1, #16
 80008a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008aa:	fb00 f60e 	mul.w	r6, r0, lr
 80008ae:	429e      	cmp	r6, r3
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3802      	subs	r0, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	b289      	uxth	r1, r1
 80008cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008d0:	fb07 3316 	mls	r3, r7, r6, r3
 80008d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d8:	fb06 f30e 	mul.w	r3, r6, lr
 80008dc:	428b      	cmp	r3, r1
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0101 	adds.w	r1, ip, r1
 80008e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3e02      	subs	r6, #2
 80008f0:	4461      	add	r1, ip
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e705      	b.n	800070c <__udivmoddi4+0xa4>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e3      	b.n	80006cc <__udivmoddi4+0x64>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f8      	b.n	80006fa <__udivmoddi4+0x92>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4646      	mov	r6, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4620      	mov	r0, r4
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4640      	mov	r0, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	3b02      	subs	r3, #2
 800092a:	4461      	add	r1, ip
 800092c:	e732      	b.n	8000794 <__udivmoddi4+0x12c>
 800092e:	4630      	mov	r0, r6
 8000930:	e709      	b.n	8000746 <__udivmoddi4+0xde>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e742      	b.n	80007be <__udivmoddi4+0x156>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_GPIO_Init+0xac>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_GPIO_Init+0xac>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_GPIO_Init+0xac>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_GPIO_Init+0xac>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_GPIO_Init+0xac>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_GPIO_Init+0xac>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_GPIO_Init+0xac>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_GPIO_Init+0xac>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_GPIO_Init+0xac>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_GPIO_Init+0xac>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <MX_GPIO_Init+0xac>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_GPIO_Init+0xac>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0xb0>)
 80009da:	f000 fc31 	bl	8001240 <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020800 	.word	0x40020800

080009f0 <main>:
void send_uart_response(float voltage);
float calculate_voltage(uint32_t duty_cycle);

/* Main Program */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    /* Initialize all configured peripherals */
    HAL_Init();
 80009f4:	f000 faa8 	bl	8000f48 <HAL_Init>
    SystemClock_Config();
 80009f8:	f000 f898 	bl	8000b2c <SystemClock_Config>
    MX_GPIO_Init();
 80009fc:	f7ff ff9e 	bl	800093c <MX_GPIO_Init>
    MX_USART2_UART_Init();   // UART for sending responses
 8000a00:	f000 fa06 	bl	8000e10 <MX_USART2_UART_Init>
    MX_TIM2_Init();          // Timer for PWM Input Capture
 8000a04:	f000 f96c 	bl	8000ce0 <MX_TIM2_Init>

    /* Start PWM input capture */
    HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <main+0x4c>)
 8000a0c:	f001 fbe4 	bl	80021d8 <HAL_TIM_IC_Start>
        /* Get the PWM duty cycle */
//        pwm_duty_cycle = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
//        pwm_frequency = 1000//HAL_RCC_GetHCLKFreq() / (__HAL_TIM_GET_AUTORELOAD(&htim2) + 1);

        /* Calculate the corresponding voltage based on the duty cycle */
        voltage_response = calculate_voltage(pwm_duty_cycle);
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <main+0x50>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f817 	bl	8000a48 <calculate_voltage>
 8000a1a:	eef0 7a40 	vmov.f32	s15, s0
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <main+0x54>)
 8000a20:	edc3 7a00 	vstr	s15, [r3]

        /* Send the calculated voltage via UART */
        send_uart_response(voltage_response);
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <main+0x54>)
 8000a26:	edd3 7a00 	vldr	s15, [r3]
 8000a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2e:	f000 f849 	bl	8000ac4 <send_uart_response>

        /* Delay between transmissions */
        HAL_Delay(1000);  // Delay 1 second before next response
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f000 faf9 	bl	800102c <HAL_Delay>
        voltage_response = calculate_voltage(pwm_duty_cycle);
 8000a3a:	e7e9      	b.n	8000a10 <main+0x20>
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	20000000 	.word	0x20000000
 8000a44:	200000c8 	.word	0x200000c8

08000a48 <calculate_voltage>:
    }
}

/* Function to calculate voltage based on duty cycle */
float calculate_voltage(uint32_t duty_cycle)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    if (duty_cycle == 100) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b64      	cmp	r3, #100	; 0x64
 8000a54:	d102      	bne.n	8000a5c <calculate_voltage+0x14>
        return 0.0;  // Standby/Vehicle Detection
 8000a56:	f04f 0300 	mov.w	r3, #0
 8000a5a:	e020      	b.n	8000a9e <calculate_voltage+0x56>
    } else if (duty_cycle == 10) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d101      	bne.n	8000a66 <calculate_voltage+0x1e>
        return 2.7;  // Cable plugged in
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <calculate_voltage+0x68>)
 8000a64:	e01b      	b.n	8000a9e <calculate_voltage+0x56>
    } else if (duty_cycle == 50) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b32      	cmp	r3, #50	; 0x32
 8000a6a:	d101      	bne.n	8000a70 <calculate_voltage+0x28>
        return 7.0;  // Charging state
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <calculate_voltage+0x6c>)
 8000a6e:	e016      	b.n	8000a9e <calculate_voltage+0x56>
    } else if (duty_cycle == 95) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b5f      	cmp	r3, #95	; 0x5f
 8000a74:	d101      	bne.n	8000a7a <calculate_voltage+0x32>
        return 12.0;  // Charging complete
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <calculate_voltage+0x70>)
 8000a78:	e011      	b.n	8000a9e <calculate_voltage+0x56>
    } else if (duty_cycle == 5) {
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d102      	bne.n	8000a86 <calculate_voltage+0x3e>
        return 0.0;  // Fault state
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	e00b      	b.n	8000a9e <calculate_voltage+0x56>
    } else if (duty_cycle == 20) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b14      	cmp	r3, #20
 8000a8a:	d101      	bne.n	8000a90 <calculate_voltage+0x48>
        return 3.6;  // Ready to charge
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <calculate_voltage+0x74>)
 8000a8e:	e006      	b.n	8000a9e <calculate_voltage+0x56>
    } else if (duty_cycle == 30) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b1e      	cmp	r3, #30
 8000a94:	d101      	bne.n	8000a9a <calculate_voltage+0x52>
        return 5.5;  // Charging with renewable energy
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <calculate_voltage+0x78>)
 8000a98:	e001      	b.n	8000a9e <calculate_voltage+0x56>
    }
    return 0.0;  // Default or unknown state
 8000a9a:	f04f 0300 	mov.w	r3, #0
}
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	402ccccd 	.word	0x402ccccd
 8000ab4:	40e00000 	.word	0x40e00000
 8000ab8:	41400000 	.word	0x41400000
 8000abc:	40666666 	.word	0x40666666
 8000ac0:	40b00000 	.word	0x40b00000

08000ac4 <send_uart_response>:

/* Function to send voltage response via UART */
void send_uart_response(float voltage)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af04      	add	r7, sp, #16
 8000aca:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(uart_buffer, sizeof(uart_buffer), "Duty: %lu%%, Freq: %lu Hz, Voltage: %.2fV\r\n",pwm_duty_cycle, pwm_frequency, voltage_response);
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <send_uart_response+0x50>)
 8000ad0:	681d      	ldr	r5, [r3, #0]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <send_uart_response+0x54>)
 8000ad4:	681c      	ldr	r4, [r3, #0]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <send_uart_response+0x58>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd54 	bl	8000588 <__aeabi_f2d>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ae8:	9400      	str	r4, [sp, #0]
 8000aea:	462b      	mov	r3, r5
 8000aec:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <send_uart_response+0x5c>)
 8000aee:	2132      	movs	r1, #50	; 0x32
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <send_uart_response+0x60>)
 8000af2:	f002 fb49 	bl	8003188 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <send_uart_response+0x60>)
 8000af8:	f7ff fb8a 	bl	8000210 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <send_uart_response+0x60>)
 8000b06:	4808      	ldr	r0, [pc, #32]	; (8000b28 <send_uart_response+0x64>)
 8000b08:	f001 ff97 	bl	8002a3a <HAL_UART_Transmit>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bdb0      	pop	{r4, r5, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	200000c8 	.word	0x200000c8
 8000b20:	08003a7c 	.word	0x08003a7c
 8000b24:	20000094 	.word	0x20000094
 8000b28:	20000118 	.word	0x20000118

08000b2c <SystemClock_Config>:



/* System Clock Configuration ------------------------------------------------*/
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b092      	sub	sp, #72	; 0x48
 8000b30:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2234      	movs	r2, #52	; 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fb1c 	bl	8003178 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000b62:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 f83f 	bl	8001bfc <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b7e:	230f      	movs	r3, #15
 8000b80:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b82:	2302      	movs	r3, #2
 8000b84:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000b94:	463b      	mov	r3, r7
 8000b96:	2102      	movs	r1, #2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fce5 	bl	8001568 <HAL_RCC_ClockConfig>
}
 8000b9e:	bf00      	nop
 8000ba0:	3748      	adds	r7, #72	; 0x48
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Error_Handler>:
/* UART Initialization -------------------------------------------------------*/


/* Error Handler --------------------------------------------------------------*/
void Error_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
    while (1)
 8000baa:	e7fe      	b.n	8000baa <Error_Handler+0x4>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f000 faf4 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f9d0 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f002 fa50 	bl	8003124 <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20020000 	.word	0x20020000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	200000cc 	.word	0x200000cc
 8000cb8:	20000170 	.word	0x20000170

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d12:	f04f 32ff 	mov.w	r2, #4294967295
 8000d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d24:	4816      	ldr	r0, [pc, #88]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d26:	f001 fa07 	bl	8002138 <HAL_TIM_IC_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d30:	f7ff ff39 	bl	8000ba6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d44:	f001 fdb0 	bl	80028a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d4e:	f7ff ff2a 	bl	8000ba6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d56:	2301      	movs	r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_TIM2_Init+0xa0>)
 8000d6a:	f001 fb11 	bl	8002390 <HAL_TIM_IC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d74:	f7ff ff17 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000d0 	.word	0x200000d0

08000d84 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da4:	d12b      	bne.n	8000dfe <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_TIM_IC_MspInit+0x84>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <HAL_TIM_IC_MspInit+0x84>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_TIM_IC_MspInit+0x84>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_TIM_IC_MspInit+0x84>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_TIM_IC_MspInit+0x84>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_TIM_IC_MspInit+0x84>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dee:	2301      	movs	r3, #1
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <HAL_TIM_IC_MspInit+0x88>)
 8000dfa:	f000 fa21 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_USART2_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e48:	f001 fdaa 	bl	80029a0 <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f7ff fea8 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000118 	.word	0x20000118
 8000e60:	40004400 	.word	0x40004400

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000eda:	f000 f9b1 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1e:	f7ff fecd 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f002 f905 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fd63 	bl	80009f0 <main>
  bx  lr    
 8000f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f38:	08003b04 	.word	0x08003b04
  ldr r2, =_sbss
 8000f3c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f40:	20000170 	.word	0x20000170

08000f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f931 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fe16 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f93b 	bl	8001226 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f911 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000010 	.word	0x20000010
 8000fe8:	2000000c 	.word	0x2000000c

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000010 	.word	0x20000010
 8001010:	2000015c 	.word	0x2000015c

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2000015c 	.word	0x2000015c

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000010 	.word	0x20000010

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff47 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff5c 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffb0 	bl	8001194 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e165      	b.n	8001528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 8154 	bne.w	8001522 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d005      	beq.n	8001292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	2b02      	cmp	r3, #2
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80ae 	beq.w	8001522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <HAL_GPIO_Init+0x300>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <HAL_GPIO_Init+0x300>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_GPIO_Init+0x300>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e2:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_GPIO_Init+0x304>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x308>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d025      	beq.n	800145a <HAL_GPIO_Init+0x21a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x30c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01f      	beq.n	8001456 <HAL_GPIO_Init+0x216>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x310>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d019      	beq.n	8001452 <HAL_GPIO_Init+0x212>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x314>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0x20e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x318>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d00d      	beq.n	800144a <HAL_GPIO_Init+0x20a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4a      	ldr	r2, [pc, #296]	; (800155c <HAL_GPIO_Init+0x31c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0x206>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a49      	ldr	r2, [pc, #292]	; (8001560 <HAL_GPIO_Init+0x320>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_Init+0x202>
 800143e:	2306      	movs	r3, #6
 8001440:	e00c      	b.n	800145c <HAL_GPIO_Init+0x21c>
 8001442:	2307      	movs	r3, #7
 8001444:	e00a      	b.n	800145c <HAL_GPIO_Init+0x21c>
 8001446:	2305      	movs	r3, #5
 8001448:	e008      	b.n	800145c <HAL_GPIO_Init+0x21c>
 800144a:	2304      	movs	r3, #4
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x21c>
 800144e:	2303      	movs	r3, #3
 8001450:	e004      	b.n	800145c <HAL_GPIO_Init+0x21c>
 8001452:	2302      	movs	r3, #2
 8001454:	e002      	b.n	800145c <HAL_GPIO_Init+0x21c>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <HAL_GPIO_Init+0x21c>
 800145a:	2300      	movs	r3, #0
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	f002 0203 	and.w	r2, r2, #3
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	4093      	lsls	r3, r2
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800146c:	4935      	ldr	r1, [pc, #212]	; (8001544 <HAL_GPIO_Init+0x304>)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_GPIO_Init+0x324>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149e:	4a31      	ldr	r2, [pc, #196]	; (8001564 <HAL_GPIO_Init+0x324>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <HAL_GPIO_Init+0x324>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_GPIO_Init+0x324>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_GPIO_Init+0x324>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_GPIO_Init+0x324>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_GPIO_Init+0x324>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800151c:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_GPIO_Init+0x324>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3301      	adds	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	2b0f      	cmp	r3, #15
 800152c:	f67f ae96 	bls.w	800125c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40013800 	.word	0x40013800
 8001548:	40020000 	.word	0x40020000
 800154c:	40020400 	.word	0x40020400
 8001550:	40020800 	.word	0x40020800
 8001554:	40020c00 	.word	0x40020c00
 8001558:	40021000 	.word	0x40021000
 800155c:	40021400 	.word	0x40021400
 8001560:	40021800 	.word	0x40021800
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cc      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d90c      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a58      	ldr	r2, [pc, #352]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	494d      	ldr	r1, [pc, #308]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d044      	beq.n	8001688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e067      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4934      	ldr	r1, [pc, #208]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001658:	f7ff fcdc 	bl	8001014 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff fcd8 	bl	8001014 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d20c      	bcs.n	80016b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4916      	ldr	r1, [pc, #88]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f855 	bl	800179c <HAL_RCC_GetSysClockFreq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	490a      	ldr	r1, [pc, #40]	; (8001728 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc3c 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	08003aa8 	.word	0x08003aa8
 800172c:	20000008 	.word	0x20000008
 8001730:	2000000c 	.word	0x2000000c

08001734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_GetHCLKFreq+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001750:	f7ff fff0 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0a9b      	lsrs	r3, r3, #10
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4903      	ldr	r1, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	08003ab8 	.word	0x08003ab8

08001774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001778:	f7ff ffdc 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0b5b      	lsrs	r3, r3, #13
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4903      	ldr	r1, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08003ab8 	.word	0x08003ab8

0800179c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a0:	b0ae      	sub	sp, #184	; 0xb8
 80017a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c2:	4bcb      	ldr	r3, [pc, #812]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	f200 8206 	bhi.w	8001bdc <HAL_RCC_GetSysClockFreq+0x440>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	0800180d 	.word	0x0800180d
 80017dc:	08001bdd 	.word	0x08001bdd
 80017e0:	08001bdd 	.word	0x08001bdd
 80017e4:	08001bdd 	.word	0x08001bdd
 80017e8:	08001815 	.word	0x08001815
 80017ec:	08001bdd 	.word	0x08001bdd
 80017f0:	08001bdd 	.word	0x08001bdd
 80017f4:	08001bdd 	.word	0x08001bdd
 80017f8:	0800181d 	.word	0x0800181d
 80017fc:	08001bdd 	.word	0x08001bdd
 8001800:	08001bdd 	.word	0x08001bdd
 8001804:	08001bdd 	.word	0x08001bdd
 8001808:	08001a0d 	.word	0x08001a0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4bb9      	ldr	r3, [pc, #740]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001812:	e1e7      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001814:	4bb8      	ldr	r3, [pc, #736]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800181a:	e1e3      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800181c:	4bb4      	ldr	r3, [pc, #720]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001828:	4bb1      	ldr	r3, [pc, #708]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d071      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001834:	4bae      	ldr	r3, [pc, #696]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	2200      	movs	r2, #0
 800183c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001840:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800184c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800185a:	4622      	mov	r2, r4
 800185c:	462b      	mov	r3, r5
 800185e:	f04f 0000 	mov.w	r0, #0
 8001862:	f04f 0100 	mov.w	r1, #0
 8001866:	0159      	lsls	r1, r3, #5
 8001868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186c:	0150      	lsls	r0, r2, #5
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4621      	mov	r1, r4
 8001874:	1a51      	subs	r1, r2, r1
 8001876:	6439      	str	r1, [r7, #64]	; 0x40
 8001878:	4629      	mov	r1, r5
 800187a:	eb63 0301 	sbc.w	r3, r3, r1
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800188c:	4649      	mov	r1, r9
 800188e:	018b      	lsls	r3, r1, #6
 8001890:	4641      	mov	r1, r8
 8001892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001896:	4641      	mov	r1, r8
 8001898:	018a      	lsls	r2, r1, #6
 800189a:	4641      	mov	r1, r8
 800189c:	1a51      	subs	r1, r2, r1
 800189e:	63b9      	str	r1, [r7, #56]	; 0x38
 80018a0:	4649      	mov	r1, r9
 80018a2:	eb63 0301 	sbc.w	r3, r3, r1
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018b4:	4649      	mov	r1, r9
 80018b6:	00cb      	lsls	r3, r1, #3
 80018b8:	4641      	mov	r1, r8
 80018ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018be:	4641      	mov	r1, r8
 80018c0:	00ca      	lsls	r2, r1, #3
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	4622      	mov	r2, r4
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
 80018ce:	462b      	mov	r3, r5
 80018d0:	460a      	mov	r2, r1
 80018d2:	eb42 0303 	adc.w	r3, r2, r3
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018e4:	4629      	mov	r1, r5
 80018e6:	024b      	lsls	r3, r1, #9
 80018e8:	4621      	mov	r1, r4
 80018ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ee:	4621      	mov	r1, r4
 80018f0:	024a      	lsls	r2, r1, #9
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fa:	2200      	movs	r2, #0
 80018fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001904:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001908:	f7fe fe96 	bl	8000638 <__aeabi_uldivmod>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4613      	mov	r3, r2
 8001912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001916:	e067      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001918:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	2200      	movs	r2, #0
 8001920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001924:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800192c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001930:	67bb      	str	r3, [r7, #120]	; 0x78
 8001932:	2300      	movs	r3, #0
 8001934:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001936:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800193a:	4622      	mov	r2, r4
 800193c:	462b      	mov	r3, r5
 800193e:	f04f 0000 	mov.w	r0, #0
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	0159      	lsls	r1, r3, #5
 8001948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194c:	0150      	lsls	r0, r2, #5
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4621      	mov	r1, r4
 8001954:	1a51      	subs	r1, r2, r1
 8001956:	62b9      	str	r1, [r7, #40]	; 0x28
 8001958:	4629      	mov	r1, r5
 800195a:	eb63 0301 	sbc.w	r3, r3, r1
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800196c:	4649      	mov	r1, r9
 800196e:	018b      	lsls	r3, r1, #6
 8001970:	4641      	mov	r1, r8
 8001972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001976:	4641      	mov	r1, r8
 8001978:	018a      	lsls	r2, r1, #6
 800197a:	4641      	mov	r1, r8
 800197c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001980:	4649      	mov	r1, r9
 8001982:	eb63 0b01 	sbc.w	fp, r3, r1
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001992:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800199a:	4692      	mov	sl, r2
 800199c:	469b      	mov	fp, r3
 800199e:	4623      	mov	r3, r4
 80019a0:	eb1a 0303 	adds.w	r3, sl, r3
 80019a4:	623b      	str	r3, [r7, #32]
 80019a6:	462b      	mov	r3, r5
 80019a8:	eb4b 0303 	adc.w	r3, fp, r3
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019ba:	4629      	mov	r1, r5
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c4:	4621      	mov	r1, r4
 80019c6:	028a      	lsls	r2, r1, #10
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d0:	2200      	movs	r2, #0
 80019d2:	673b      	str	r3, [r7, #112]	; 0x70
 80019d4:	677a      	str	r2, [r7, #116]	; 0x74
 80019d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019da:	f7fe fe2d 	bl	8000638 <__aeabi_uldivmod>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4613      	mov	r3, r2
 80019e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	3301      	adds	r3, #1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80019fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a0a:	e0eb      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d06b      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a24:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	2300      	movs	r3, #0
 8001a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a40:	4622      	mov	r2, r4
 8001a42:	462b      	mov	r3, r5
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0159      	lsls	r1, r3, #5
 8001a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a52:	0150      	lsls	r0, r2, #5
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4621      	mov	r1, r4
 8001a5a:	1a51      	subs	r1, r2, r1
 8001a5c:	61b9      	str	r1, [r7, #24]
 8001a5e:	4629      	mov	r1, r5
 8001a60:	eb63 0301 	sbc.w	r3, r3, r1
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a72:	4659      	mov	r1, fp
 8001a74:	018b      	lsls	r3, r1, #6
 8001a76:	4651      	mov	r1, sl
 8001a78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	018a      	lsls	r2, r1, #6
 8001a80:	4651      	mov	r1, sl
 8001a82:	ebb2 0801 	subs.w	r8, r2, r1
 8001a86:	4659      	mov	r1, fp
 8001a88:	eb63 0901 	sbc.w	r9, r3, r1
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	eb18 0303 	adds.w	r3, r8, r3
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	462b      	mov	r3, r5
 8001aae:	eb49 0303 	adc.w	r3, r9, r3
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	024b      	lsls	r3, r1, #9
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aca:	4621      	mov	r1, r4
 8001acc:	024a      	lsls	r2, r1, #9
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ada:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001adc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ae0:	f7fe fdaa 	bl	8000638 <__aeabi_uldivmod>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001aee:	e065      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x420>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	2200      	movs	r2, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	4611      	mov	r1, r2
 8001b08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b0e:	2300      	movs	r3, #0
 8001b10:	657b      	str	r3, [r7, #84]	; 0x54
 8001b12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b16:	4642      	mov	r2, r8
 8001b18:	464b      	mov	r3, r9
 8001b1a:	f04f 0000 	mov.w	r0, #0
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	0159      	lsls	r1, r3, #5
 8001b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b28:	0150      	lsls	r0, r2, #5
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4641      	mov	r1, r8
 8001b30:	1a51      	subs	r1, r2, r1
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	4649      	mov	r1, r9
 8001b36:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b48:	4659      	mov	r1, fp
 8001b4a:	018b      	lsls	r3, r1, #6
 8001b4c:	4651      	mov	r1, sl
 8001b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b52:	4651      	mov	r1, sl
 8001b54:	018a      	lsls	r2, r1, #6
 8001b56:	4651      	mov	r1, sl
 8001b58:	1a54      	subs	r4, r2, r1
 8001b5a:	4659      	mov	r1, fp
 8001b5c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	00eb      	lsls	r3, r5, #3
 8001b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6e:	00e2      	lsls	r2, r4, #3
 8001b70:	4614      	mov	r4, r2
 8001b72:	461d      	mov	r5, r3
 8001b74:	4643      	mov	r3, r8
 8001b76:	18e3      	adds	r3, r4, r3
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	eb45 0303 	adc.w	r3, r5, r3
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8e:	4629      	mov	r1, r5
 8001b90:	028b      	lsls	r3, r1, #10
 8001b92:	4621      	mov	r1, r4
 8001b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b98:	4621      	mov	r1, r4
 8001b9a:	028a      	lsls	r2, r1, #10
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ba8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001baa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bae:	f7fe fd43 	bl	8000638 <__aeabi_uldivmod>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	0f1b      	lsrs	r3, r3, #28
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bda:	e003      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	37b8      	adds	r7, #184	; 0xb8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400

08001bfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e28d      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8083 	beq.w	8001d22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c1c:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d019      	beq.n	8001c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c28:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c34:	4b8e      	ldr	r3, [pc, #568]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c40:	d00c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d112      	bne.n	8001c74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d05b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x124>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d157      	bne.n	8001d20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e25a      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCC_OscConfig+0x90>
 8001c7e:	4b7c      	ldr	r3, [pc, #496]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7b      	ldr	r2, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xcc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xb4>
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xcc>
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f9a0 	bl	8001014 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f99c 	bl	8001014 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e21f      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xdc>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f98c 	bl	8001014 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff f988 	bl	8001014 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e20b      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x104>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d06f      	beq.n	8001e0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d2e:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d017      	beq.n	8001d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d11c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d116      	bne.n	8001d98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x186>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e1d3      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	e03a      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_OscConfig+0x278>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f935 	bl	8001014 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff f931 	bl	8001014 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1b4      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4925      	ldr	r1, [pc, #148]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_OscConfig+0x278>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f914 	bl	8001014 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff f910 	bl	8001014 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e193      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d036      	beq.n	8001e88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f8f4 	bl	8001014 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff f8f0 	bl	8001014 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e173      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x234>
 8001e4e:	e01b      	b.n	8001e88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff f8dd 	bl	8001014 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	e00e      	b.n	8001e7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff f8d9 	bl	8001014 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d907      	bls.n	8001e7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e15c      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470000 	.word	0x42470000
 8001e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b8a      	ldr	r3, [pc, #552]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ea      	bne.n	8001e5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8097 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b83      	ldr	r3, [pc, #524]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b7c      	ldr	r3, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b76      	ldr	r3, [pc, #472]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a75      	ldr	r2, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff f899 	bl	8001014 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff f895 	bl	8001014 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e118      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <HAL_RCC_OscConfig+0x4b0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x31e>
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	e01c      	b.n	8001f54 <HAL_RCC_OscConfig+0x358>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x340>
 8001f22:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0x358>
 8001f3c:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a59      	ldr	r2, [pc, #356]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a56      	ldr	r2, [pc, #344]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d015      	beq.n	8001f88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f85a 	bl	8001014 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7ff f856 	bl	8001014 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e0d7      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0ee      	beq.n	8001f64 <HAL_RCC_OscConfig+0x368>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff f844 	bl	8001014 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7ff f840 	bl	8001014 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0c1      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ee      	bne.n	8001f90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80ad 	beq.w	8002128 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d060      	beq.n	800209c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d145      	bne.n	800206e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_OscConfig+0x4b4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f814 	bl	8001014 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f810 	bl	8001014 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e093      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	3b01      	subs	r3, #1
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	071b      	lsls	r3, r3, #28
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x4b4>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7fe ffe5 	bl	8001014 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe ffe1 	bl	8001014 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e064      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x452>
 800206c:	e05c      	b.n	8002128 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_OscConfig+0x4b4>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe ffce 	bl	8001014 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe ffca 	bl	8001014 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04d      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_OscConfig+0x4ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x480>
 800209a:	e045      	b.n	8002128 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e040      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_RCC_OscConfig+0x538>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d030      	beq.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d129      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d122      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d119      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	3b01      	subs	r3, #1
 80020fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d10f      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e041      	b.n	80021ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fe10 	bl	8000d84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3304      	adds	r3, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f000 f9a6 	bl	80024c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_IC_Start+0x1a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e013      	b.n	800221a <HAL_TIM_IC_Start+0x42>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d104      	bne.n	8002202 <HAL_TIM_IC_Start+0x2a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e00b      	b.n	800221a <HAL_TIM_IC_Start+0x42>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d104      	bne.n	8002212 <HAL_TIM_IC_Start+0x3a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800220e:	b2db      	uxtb	r3, r3
 8002210:	e003      	b.n	800221a <HAL_TIM_IC_Start+0x42>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <HAL_TIM_IC_Start+0x54>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e013      	b.n	8002254 <HAL_TIM_IC_Start+0x7c>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d104      	bne.n	800223c <HAL_TIM_IC_Start+0x64>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e00b      	b.n	8002254 <HAL_TIM_IC_Start+0x7c>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b08      	cmp	r3, #8
 8002240:	d104      	bne.n	800224c <HAL_TIM_IC_Start+0x74>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e003      	b.n	8002254 <HAL_TIM_IC_Start+0x7c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800225c:	7bbb      	ldrb	r3, [r7, #14]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e081      	b.n	800236a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_TIM_IC_Start+0x9e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002274:	e013      	b.n	800229e <HAL_TIM_IC_Start+0xc6>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d104      	bne.n	8002286 <HAL_TIM_IC_Start+0xae>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	e00b      	b.n	800229e <HAL_TIM_IC_Start+0xc6>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d104      	bne.n	8002296 <HAL_TIM_IC_Start+0xbe>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002294:	e003      	b.n	800229e <HAL_TIM_IC_Start+0xc6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <HAL_TIM_IC_Start+0xd6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ac:	e013      	b.n	80022d6 <HAL_TIM_IC_Start+0xfe>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d104      	bne.n	80022be <HAL_TIM_IC_Start+0xe6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022bc:	e00b      	b.n	80022d6 <HAL_TIM_IC_Start+0xfe>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_IC_Start+0xf6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022cc:	e003      	b.n	80022d6 <HAL_TIM_IC_Start+0xfe>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2201      	movs	r2, #1
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fabc 	bl	800285c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <HAL_TIM_IC_Start+0x19c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d022      	beq.n	8002334 <HAL_TIM_IC_Start+0x15c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d01d      	beq.n	8002334 <HAL_TIM_IC_Start+0x15c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <HAL_TIM_IC_Start+0x1a0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d018      	beq.n	8002334 <HAL_TIM_IC_Start+0x15c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_TIM_IC_Start+0x1a4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_TIM_IC_Start+0x15c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_TIM_IC_Start+0x1a8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00e      	beq.n	8002334 <HAL_TIM_IC_Start+0x15c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <HAL_TIM_IC_Start+0x1ac>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_TIM_IC_Start+0x15c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_TIM_IC_Start+0x1b0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_TIM_IC_Start+0x15c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_TIM_IC_Start+0x1b4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d111      	bne.n	8002358 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d010      	beq.n	8002368 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002356:	e007      	b.n	8002368 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40014000 	.word	0x40014000
 800238c:	40001800 	.word	0x40001800

08002390 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e088      	b.n	80024c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f000 f91c 	bl	8002608 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020c 	bic.w	r2, r2, #12
 80023de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6999      	ldr	r1, [r3, #24]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	619a      	str	r2, [r3, #24]
 80023f2:	e060      	b.n	80024b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d11c      	bne.n	8002434 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f000 f971 	bl	80026f0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800241c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6999      	ldr	r1, [r3, #24]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	e040      	b.n	80024b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b08      	cmp	r3, #8
 8002438:	d11b      	bne.n	8002472 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f000 f98e 	bl	800276a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 020c 	bic.w	r2, r2, #12
 800245c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69d9      	ldr	r1, [r3, #28]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
 8002470:	e021      	b.n	80024b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b0c      	cmp	r3, #12
 8002476:	d11c      	bne.n	80024b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f000 f9ab 	bl	80027e2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800249a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69d9      	ldr	r1, [r3, #28]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	021a      	lsls	r2, r3, #8
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	61da      	str	r2, [r3, #28]
 80024b0:	e001      	b.n	80024b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024be:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a40      	ldr	r2, [pc, #256]	; (80025dc <TIM_Base_SetConfig+0x114>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d00f      	beq.n	8002508 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3d      	ldr	r2, [pc, #244]	; (80025e0 <TIM_Base_SetConfig+0x118>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00b      	beq.n	8002508 <TIM_Base_SetConfig+0x40>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3c      	ldr	r2, [pc, #240]	; (80025e4 <TIM_Base_SetConfig+0x11c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d007      	beq.n	8002508 <TIM_Base_SetConfig+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <TIM_Base_SetConfig+0x120>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d003      	beq.n	8002508 <TIM_Base_SetConfig+0x40>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3a      	ldr	r2, [pc, #232]	; (80025ec <TIM_Base_SetConfig+0x124>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d108      	bne.n	800251a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <TIM_Base_SetConfig+0x114>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d02b      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d027      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2c      	ldr	r2, [pc, #176]	; (80025e0 <TIM_Base_SetConfig+0x118>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d023      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <TIM_Base_SetConfig+0x11c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01f      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <TIM_Base_SetConfig+0x120>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01b      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a29      	ldr	r2, [pc, #164]	; (80025ec <TIM_Base_SetConfig+0x124>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d017      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <TIM_Base_SetConfig+0x128>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <TIM_Base_SetConfig+0x12c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00f      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <TIM_Base_SetConfig+0x130>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00b      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a25      	ldr	r2, [pc, #148]	; (80025fc <TIM_Base_SetConfig+0x134>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a24      	ldr	r2, [pc, #144]	; (8002600 <TIM_Base_SetConfig+0x138>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d003      	beq.n	800257a <TIM_Base_SetConfig+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <TIM_Base_SetConfig+0x13c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d108      	bne.n	800258c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <TIM_Base_SetConfig+0x114>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <TIM_Base_SetConfig+0xf8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <TIM_Base_SetConfig+0x124>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	615a      	str	r2, [r3, #20]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40000800 	.word	0x40000800
 80025e8:	40000c00 	.word	0x40000c00
 80025ec:	40010400 	.word	0x40010400
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800
 80025fc:	40001800 	.word	0x40001800
 8002600:	40001c00 	.word	0x40001c00
 8002604:	40002000 	.word	0x40002000

08002608 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f023 0201 	bic.w	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <TIM_TI1_SetConfig+0xcc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01b      	beq.n	800266e <TIM_TI1_SetConfig+0x66>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d017      	beq.n	800266e <TIM_TI1_SetConfig+0x66>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <TIM_TI1_SetConfig+0xd0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <TIM_TI1_SetConfig+0x66>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <TIM_TI1_SetConfig+0xd4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_TI1_SetConfig+0x66>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <TIM_TI1_SetConfig+0xd8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_TI1_SetConfig+0x66>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <TIM_TI1_SetConfig+0xdc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_TI1_SetConfig+0x66>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <TIM_TI1_SetConfig+0xe0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_TI1_SetConfig+0x66>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <TIM_TI1_SetConfig+0xe4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <TIM_TI1_SetConfig+0x6a>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <TIM_TI1_SetConfig+0x6c>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e003      	b.n	8002692 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f023 030a 	bic.w	r3, r3, #10
 80026ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f003 030a 	and.w	r3, r3, #10
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	621a      	str	r2, [r3, #32]
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40000c00 	.word	0x40000c00
 80026e4:	40010400 	.word	0x40010400
 80026e8:	40014000 	.word	0x40014000
 80026ec:	40001800 	.word	0x40001800

080026f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0210 	bic.w	r2, r3, #16
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800272e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	031b      	lsls	r3, r3, #12
 8002734:	b29b      	uxth	r3, r3
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002742:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800276a:	b480      	push	{r7}
 800276c:	b087      	sub	sp, #28
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80027ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002820:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	031b      	lsls	r3, r3, #12
 8002826:	b29b      	uxth	r3, r3
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002834:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	031b      	lsls	r3, r3, #12
 800283a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	621a      	str	r2, [r3, #32]
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2201      	movs	r2, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	43db      	mvns	r3, r3
 800287e:	401a      	ands	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1a      	ldr	r2, [r3, #32]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028bc:	2302      	movs	r3, #2
 80028be:	e05a      	b.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d01d      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d018      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00e      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d004      	beq.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10c      	bne.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	4313      	orrs	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40010400 	.word	0x40010400
 8002998:	40014000 	.word	0x40014000
 800299c:	40001800 	.word	0x40001800

080029a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e03f      	b.n	8002a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fa4c 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f929 	bl	8002c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b08a      	sub	sp, #40	; 0x28
 8002a3e:	af02      	add	r7, sp, #8
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d17c      	bne.n	8002b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_UART_Transmit+0x2c>
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e075      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Transmit+0x3e>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e06e      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2221      	movs	r2, #33	; 0x21
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a8e:	f7fe fac1 	bl	8001014 <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa8:	d108      	bne.n	8002abc <HAL_UART_Transmit+0x82>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e003      	b.n	8002ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002acc:	e02a      	b.n	8002b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f840 	bl	8002b5e <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e036      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3302      	adds	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e007      	b.n	8002b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1cf      	bne.n	8002ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f810 	bl	8002b5e <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e006      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b090      	sub	sp, #64	; 0x40
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6e:	e050      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b76:	d04c      	beq.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b7e:	f7fe fa49 	bl	8001014 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d241      	bcs.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	e853 3f00 	ldrex	r3, [r3]
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bae:	637a      	str	r2, [r7, #52]	; 0x34
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e5      	bne.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3314      	adds	r3, #20
 8002be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be2:	623a      	str	r2, [r7, #32]
 8002be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	69f9      	ldr	r1, [r7, #28]
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e5      	bne.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e00f      	b.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d09f      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3740      	adds	r7, #64	; 0x40
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c40:	b0c0      	sub	sp, #256	; 0x100
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	68d9      	ldr	r1, [r3, #12]
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	ea40 0301 	orr.w	r3, r0, r1
 8002c64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c94:	f021 010c 	bic.w	r1, r1, #12
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	6999      	ldr	r1, [r3, #24]
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	ea40 0301 	orr.w	r3, r0, r1
 8002cc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4b8f      	ldr	r3, [pc, #572]	; (8002f08 <UART_SetConfig+0x2cc>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d005      	beq.n	8002cdc <UART_SetConfig+0xa0>
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b8d      	ldr	r3, [pc, #564]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d104      	bne.n	8002ce6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cdc:	f7fe fd4a 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 8002ce0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ce4:	e003      	b.n	8002cee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce6:	f7fe fd31 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8002cea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf8:	f040 810c 	bne.w	8002f14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d0e:	4622      	mov	r2, r4
 8002d10:	462b      	mov	r3, r5
 8002d12:	1891      	adds	r1, r2, r2
 8002d14:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d16:	415b      	adcs	r3, r3
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d1e:	4621      	mov	r1, r4
 8002d20:	eb12 0801 	adds.w	r8, r2, r1
 8002d24:	4629      	mov	r1, r5
 8002d26:	eb43 0901 	adc.w	r9, r3, r1
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	eb18 0303 	adds.w	r3, r8, r3
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	eb49 0303 	adc.w	r3, r9, r3
 8002d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	18db      	adds	r3, r3, r3
 8002d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d70:	4613      	mov	r3, r2
 8002d72:	eb42 0303 	adc.w	r3, r2, r3
 8002d76:	657b      	str	r3, [r7, #84]	; 0x54
 8002d78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d80:	f7fd fc5a 	bl	8000638 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4b61      	ldr	r3, [pc, #388]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	011c      	lsls	r4, r3, #4
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002da0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dac:	415b      	adcs	r3, r3
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002db4:	4641      	mov	r1, r8
 8002db6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dba:	4649      	mov	r1, r9
 8002dbc:	eb43 0b01 	adc.w	fp, r3, r1
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd4:	4692      	mov	sl, r2
 8002dd6:	469b      	mov	fp, r3
 8002dd8:	4643      	mov	r3, r8
 8002dda:	eb1a 0303 	adds.w	r3, sl, r3
 8002dde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de2:	464b      	mov	r3, r9
 8002de4:	eb4b 0303 	adc.w	r3, fp, r3
 8002de8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e00:	460b      	mov	r3, r1
 8002e02:	18db      	adds	r3, r3, r3
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
 8002e06:	4613      	mov	r3, r2
 8002e08:	eb42 0303 	adc.w	r3, r2, r3
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e16:	f7fd fc0f 	bl	8000638 <__aeabi_uldivmod>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002e22:	fba3 2301 	umull	r2, r3, r3, r1
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2264      	movs	r2, #100	; 0x64
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	1acb      	subs	r3, r1, r3
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e36:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002e38:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e44:	441c      	add	r4, r3
 8002e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e58:	4642      	mov	r2, r8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	1891      	adds	r1, r2, r2
 8002e5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e60:	415b      	adcs	r3, r3
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e68:	4641      	mov	r1, r8
 8002e6a:	1851      	adds	r1, r2, r1
 8002e6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e6e:	4649      	mov	r1, r9
 8002e70:	414b      	adcs	r3, r1
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e80:	4659      	mov	r1, fp
 8002e82:	00cb      	lsls	r3, r1, #3
 8002e84:	4651      	mov	r1, sl
 8002e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	00ca      	lsls	r2, r1, #3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	4642      	mov	r2, r8
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	eb42 0303 	adc.w	r3, r2, r3
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	18db      	adds	r3, r3, r3
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ece:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ed2:	f7fd fbb1 	bl	8000638 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002edc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	2164      	movs	r1, #100	; 0x64
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	3332      	adds	r3, #50	; 0x32
 8002eee:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	f003 0207 	and.w	r2, r3, #7
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4422      	add	r2, r4
 8002f02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f04:	e105      	b.n	8003112 <UART_SetConfig+0x4d6>
 8002f06:	bf00      	nop
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f26:	4642      	mov	r2, r8
 8002f28:	464b      	mov	r3, r9
 8002f2a:	1891      	adds	r1, r2, r2
 8002f2c:	6239      	str	r1, [r7, #32]
 8002f2e:	415b      	adcs	r3, r3
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f36:	4641      	mov	r1, r8
 8002f38:	1854      	adds	r4, r2, r1
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	eb43 0501 	adc.w	r5, r3, r1
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	00eb      	lsls	r3, r5, #3
 8002f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f4e:	00e2      	lsls	r2, r4, #3
 8002f50:	4614      	mov	r4, r2
 8002f52:	461d      	mov	r5, r3
 8002f54:	4643      	mov	r3, r8
 8002f56:	18e3      	adds	r3, r4, r3
 8002f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	eb45 0303 	adc.w	r3, r5, r3
 8002f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f82:	4629      	mov	r1, r5
 8002f84:	008b      	lsls	r3, r1, #2
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	008a      	lsls	r2, r1, #2
 8002f90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f94:	f7fd fb50 	bl	8000638 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b60      	ldr	r3, [pc, #384]	; (8003120 <UART_SetConfig+0x4e4>)
 8002f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	011c      	lsls	r4, r3, #4
 8002fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	1891      	adds	r1, r2, r2
 8002fbe:	61b9      	str	r1, [r7, #24]
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc8:	4641      	mov	r1, r8
 8002fca:	1851      	adds	r1, r2, r1
 8002fcc:	6139      	str	r1, [r7, #16]
 8002fce:	4649      	mov	r1, r9
 8002fd0:	414b      	adcs	r3, r1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	00cb      	lsls	r3, r1, #3
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fea:	4651      	mov	r1, sl
 8002fec:	00ca      	lsls	r2, r1, #3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	460a      	mov	r2, r1
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	67bb      	str	r3, [r7, #120]	; 0x78
 8003012:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003020:	4649      	mov	r1, r9
 8003022:	008b      	lsls	r3, r1, #2
 8003024:	4641      	mov	r1, r8
 8003026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800302a:	4641      	mov	r1, r8
 800302c:	008a      	lsls	r2, r1, #2
 800302e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003032:	f7fd fb01 	bl	8000638 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <UART_SetConfig+0x4e4>)
 800303c:	fba3 1302 	umull	r1, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	2164      	movs	r1, #100	; 0x64
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	3332      	adds	r3, #50	; 0x32
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <UART_SetConfig+0x4e4>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305a:	441c      	add	r4, r3
 800305c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003060:	2200      	movs	r2, #0
 8003062:	673b      	str	r3, [r7, #112]	; 0x70
 8003064:	677a      	str	r2, [r7, #116]	; 0x74
 8003066:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800306a:	4642      	mov	r2, r8
 800306c:	464b      	mov	r3, r9
 800306e:	1891      	adds	r1, r2, r2
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	415b      	adcs	r3, r3
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800307a:	4641      	mov	r1, r8
 800307c:	1851      	adds	r1, r2, r1
 800307e:	6039      	str	r1, [r7, #0]
 8003080:	4649      	mov	r1, r9
 8003082:	414b      	adcs	r3, r1
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003092:	4659      	mov	r1, fp
 8003094:	00cb      	lsls	r3, r1, #3
 8003096:	4651      	mov	r1, sl
 8003098:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309c:	4651      	mov	r1, sl
 800309e:	00ca      	lsls	r2, r1, #3
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	4603      	mov	r3, r0
 80030a6:	4642      	mov	r2, r8
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ac:	464b      	mov	r3, r9
 80030ae:	460a      	mov	r2, r1
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	663b      	str	r3, [r7, #96]	; 0x60
 80030c0:	667a      	str	r2, [r7, #100]	; 0x64
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030ce:	4649      	mov	r1, r9
 80030d0:	008b      	lsls	r3, r1, #2
 80030d2:	4641      	mov	r1, r8
 80030d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d8:	4641      	mov	r1, r8
 80030da:	008a      	lsls	r2, r1, #2
 80030dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030e0:	f7fd faaa 	bl	8000638 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <UART_SetConfig+0x4e4>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2164      	movs	r1, #100	; 0x64
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	3332      	adds	r3, #50	; 0x32
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <UART_SetConfig+0x4e4>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4422      	add	r2, r4
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	bf00      	nop
 8003114:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	51eb851f 	.word	0x51eb851f

08003124 <__errno>:
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <__errno+0x8>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000014 	.word	0x20000014

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	4d0d      	ldr	r5, [pc, #52]	; (8003168 <__libc_init_array+0x38>)
 8003134:	4c0d      	ldr	r4, [pc, #52]	; (800316c <__libc_init_array+0x3c>)
 8003136:	1b64      	subs	r4, r4, r5
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	2600      	movs	r6, #0
 800313c:	42a6      	cmp	r6, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	4d0b      	ldr	r5, [pc, #44]	; (8003170 <__libc_init_array+0x40>)
 8003142:	4c0c      	ldr	r4, [pc, #48]	; (8003174 <__libc_init_array+0x44>)
 8003144:	f000 fc8e 	bl	8003a64 <_init>
 8003148:	1b64      	subs	r4, r4, r5
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	2600      	movs	r6, #0
 800314e:	42a6      	cmp	r6, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	f855 3b04 	ldr.w	r3, [r5], #4
 8003158:	4798      	blx	r3
 800315a:	3601      	adds	r6, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003162:	4798      	blx	r3
 8003164:	3601      	adds	r6, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	08003afc 	.word	0x08003afc
 800316c:	08003afc 	.word	0x08003afc
 8003170:	08003afc 	.word	0x08003afc
 8003174:	08003b00 	.word	0x08003b00

08003178 <memset>:
 8003178:	4402      	add	r2, r0
 800317a:	4603      	mov	r3, r0
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <memset+0xa>
 8003180:	4770      	bx	lr
 8003182:	f803 1b01 	strb.w	r1, [r3], #1
 8003186:	e7f9      	b.n	800317c <memset+0x4>

08003188 <siprintf>:
 8003188:	b40e      	push	{r1, r2, r3}
 800318a:	b500      	push	{lr}
 800318c:	b09c      	sub	sp, #112	; 0x70
 800318e:	ab1d      	add	r3, sp, #116	; 0x74
 8003190:	9002      	str	r0, [sp, #8]
 8003192:	9006      	str	r0, [sp, #24]
 8003194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003198:	4809      	ldr	r0, [pc, #36]	; (80031c0 <siprintf+0x38>)
 800319a:	9107      	str	r1, [sp, #28]
 800319c:	9104      	str	r1, [sp, #16]
 800319e:	4909      	ldr	r1, [pc, #36]	; (80031c4 <siprintf+0x3c>)
 80031a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a4:	9105      	str	r1, [sp, #20]
 80031a6:	6800      	ldr	r0, [r0, #0]
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	a902      	add	r1, sp, #8
 80031ac:	f000 f868 	bl	8003280 <_svfiprintf_r>
 80031b0:	9b02      	ldr	r3, [sp, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	b01c      	add	sp, #112	; 0x70
 80031b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031bc:	b003      	add	sp, #12
 80031be:	4770      	bx	lr
 80031c0:	20000014 	.word	0x20000014
 80031c4:	ffff0208 	.word	0xffff0208

080031c8 <__ssputs_r>:
 80031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	688e      	ldr	r6, [r1, #8]
 80031ce:	429e      	cmp	r6, r3
 80031d0:	4682      	mov	sl, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	4690      	mov	r8, r2
 80031d6:	461f      	mov	r7, r3
 80031d8:	d838      	bhi.n	800324c <__ssputs_r+0x84>
 80031da:	898a      	ldrh	r2, [r1, #12]
 80031dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031e0:	d032      	beq.n	8003248 <__ssputs_r+0x80>
 80031e2:	6825      	ldr	r5, [r4, #0]
 80031e4:	6909      	ldr	r1, [r1, #16]
 80031e6:	eba5 0901 	sub.w	r9, r5, r1
 80031ea:	6965      	ldr	r5, [r4, #20]
 80031ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031f4:	3301      	adds	r3, #1
 80031f6:	444b      	add	r3, r9
 80031f8:	106d      	asrs	r5, r5, #1
 80031fa:	429d      	cmp	r5, r3
 80031fc:	bf38      	it	cc
 80031fe:	461d      	movcc	r5, r3
 8003200:	0553      	lsls	r3, r2, #21
 8003202:	d531      	bpl.n	8003268 <__ssputs_r+0xa0>
 8003204:	4629      	mov	r1, r5
 8003206:	f000 fb63 	bl	80038d0 <_malloc_r>
 800320a:	4606      	mov	r6, r0
 800320c:	b950      	cbnz	r0, 8003224 <__ssputs_r+0x5c>
 800320e:	230c      	movs	r3, #12
 8003210:	f8ca 3000 	str.w	r3, [sl]
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321a:	81a3      	strh	r3, [r4, #12]
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003224:	6921      	ldr	r1, [r4, #16]
 8003226:	464a      	mov	r2, r9
 8003228:	f000 fabe 	bl	80037a8 <memcpy>
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	6126      	str	r6, [r4, #16]
 800323a:	6165      	str	r5, [r4, #20]
 800323c:	444e      	add	r6, r9
 800323e:	eba5 0509 	sub.w	r5, r5, r9
 8003242:	6026      	str	r6, [r4, #0]
 8003244:	60a5      	str	r5, [r4, #8]
 8003246:	463e      	mov	r6, r7
 8003248:	42be      	cmp	r6, r7
 800324a:	d900      	bls.n	800324e <__ssputs_r+0x86>
 800324c:	463e      	mov	r6, r7
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	4632      	mov	r2, r6
 8003252:	4641      	mov	r1, r8
 8003254:	f000 fab6 	bl	80037c4 <memmove>
 8003258:	68a3      	ldr	r3, [r4, #8]
 800325a:	1b9b      	subs	r3, r3, r6
 800325c:	60a3      	str	r3, [r4, #8]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	4433      	add	r3, r6
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	2000      	movs	r0, #0
 8003266:	e7db      	b.n	8003220 <__ssputs_r+0x58>
 8003268:	462a      	mov	r2, r5
 800326a:	f000 fba5 	bl	80039b8 <_realloc_r>
 800326e:	4606      	mov	r6, r0
 8003270:	2800      	cmp	r0, #0
 8003272:	d1e1      	bne.n	8003238 <__ssputs_r+0x70>
 8003274:	6921      	ldr	r1, [r4, #16]
 8003276:	4650      	mov	r0, sl
 8003278:	f000 fabe 	bl	80037f8 <_free_r>
 800327c:	e7c7      	b.n	800320e <__ssputs_r+0x46>
	...

08003280 <_svfiprintf_r>:
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	4698      	mov	r8, r3
 8003286:	898b      	ldrh	r3, [r1, #12]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	b09d      	sub	sp, #116	; 0x74
 800328c:	4607      	mov	r7, r0
 800328e:	460d      	mov	r5, r1
 8003290:	4614      	mov	r4, r2
 8003292:	d50e      	bpl.n	80032b2 <_svfiprintf_r+0x32>
 8003294:	690b      	ldr	r3, [r1, #16]
 8003296:	b963      	cbnz	r3, 80032b2 <_svfiprintf_r+0x32>
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	f000 fb19 	bl	80038d0 <_malloc_r>
 800329e:	6028      	str	r0, [r5, #0]
 80032a0:	6128      	str	r0, [r5, #16]
 80032a2:	b920      	cbnz	r0, 80032ae <_svfiprintf_r+0x2e>
 80032a4:	230c      	movs	r3, #12
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e0d1      	b.n	8003452 <_svfiprintf_r+0x1d2>
 80032ae:	2340      	movs	r3, #64	; 0x40
 80032b0:	616b      	str	r3, [r5, #20]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9309      	str	r3, [sp, #36]	; 0x24
 80032b6:	2320      	movs	r3, #32
 80032b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80032c0:	2330      	movs	r3, #48	; 0x30
 80032c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800346c <_svfiprintf_r+0x1ec>
 80032c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032ca:	f04f 0901 	mov.w	r9, #1
 80032ce:	4623      	mov	r3, r4
 80032d0:	469a      	mov	sl, r3
 80032d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d6:	b10a      	cbz	r2, 80032dc <_svfiprintf_r+0x5c>
 80032d8:	2a25      	cmp	r2, #37	; 0x25
 80032da:	d1f9      	bne.n	80032d0 <_svfiprintf_r+0x50>
 80032dc:	ebba 0b04 	subs.w	fp, sl, r4
 80032e0:	d00b      	beq.n	80032fa <_svfiprintf_r+0x7a>
 80032e2:	465b      	mov	r3, fp
 80032e4:	4622      	mov	r2, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	4638      	mov	r0, r7
 80032ea:	f7ff ff6d 	bl	80031c8 <__ssputs_r>
 80032ee:	3001      	adds	r0, #1
 80032f0:	f000 80aa 	beq.w	8003448 <_svfiprintf_r+0x1c8>
 80032f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f6:	445a      	add	r2, fp
 80032f8:	9209      	str	r2, [sp, #36]	; 0x24
 80032fa:	f89a 3000 	ldrb.w	r3, [sl]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80a2 	beq.w	8003448 <_svfiprintf_r+0x1c8>
 8003304:	2300      	movs	r3, #0
 8003306:	f04f 32ff 	mov.w	r2, #4294967295
 800330a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800330e:	f10a 0a01 	add.w	sl, sl, #1
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	9307      	str	r3, [sp, #28]
 8003316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800331a:	931a      	str	r3, [sp, #104]	; 0x68
 800331c:	4654      	mov	r4, sl
 800331e:	2205      	movs	r2, #5
 8003320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003324:	4851      	ldr	r0, [pc, #324]	; (800346c <_svfiprintf_r+0x1ec>)
 8003326:	f7fc ff7b 	bl	8000220 <memchr>
 800332a:	9a04      	ldr	r2, [sp, #16]
 800332c:	b9d8      	cbnz	r0, 8003366 <_svfiprintf_r+0xe6>
 800332e:	06d0      	lsls	r0, r2, #27
 8003330:	bf44      	itt	mi
 8003332:	2320      	movmi	r3, #32
 8003334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003338:	0711      	lsls	r1, r2, #28
 800333a:	bf44      	itt	mi
 800333c:	232b      	movmi	r3, #43	; 0x2b
 800333e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003342:	f89a 3000 	ldrb.w	r3, [sl]
 8003346:	2b2a      	cmp	r3, #42	; 0x2a
 8003348:	d015      	beq.n	8003376 <_svfiprintf_r+0xf6>
 800334a:	9a07      	ldr	r2, [sp, #28]
 800334c:	4654      	mov	r4, sl
 800334e:	2000      	movs	r0, #0
 8003350:	f04f 0c0a 	mov.w	ip, #10
 8003354:	4621      	mov	r1, r4
 8003356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800335a:	3b30      	subs	r3, #48	; 0x30
 800335c:	2b09      	cmp	r3, #9
 800335e:	d94e      	bls.n	80033fe <_svfiprintf_r+0x17e>
 8003360:	b1b0      	cbz	r0, 8003390 <_svfiprintf_r+0x110>
 8003362:	9207      	str	r2, [sp, #28]
 8003364:	e014      	b.n	8003390 <_svfiprintf_r+0x110>
 8003366:	eba0 0308 	sub.w	r3, r0, r8
 800336a:	fa09 f303 	lsl.w	r3, r9, r3
 800336e:	4313      	orrs	r3, r2
 8003370:	9304      	str	r3, [sp, #16]
 8003372:	46a2      	mov	sl, r4
 8003374:	e7d2      	b.n	800331c <_svfiprintf_r+0x9c>
 8003376:	9b03      	ldr	r3, [sp, #12]
 8003378:	1d19      	adds	r1, r3, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	9103      	str	r1, [sp, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfbb      	ittet	lt
 8003382:	425b      	neglt	r3, r3
 8003384:	f042 0202 	orrlt.w	r2, r2, #2
 8003388:	9307      	strge	r3, [sp, #28]
 800338a:	9307      	strlt	r3, [sp, #28]
 800338c:	bfb8      	it	lt
 800338e:	9204      	strlt	r2, [sp, #16]
 8003390:	7823      	ldrb	r3, [r4, #0]
 8003392:	2b2e      	cmp	r3, #46	; 0x2e
 8003394:	d10c      	bne.n	80033b0 <_svfiprintf_r+0x130>
 8003396:	7863      	ldrb	r3, [r4, #1]
 8003398:	2b2a      	cmp	r3, #42	; 0x2a
 800339a:	d135      	bne.n	8003408 <_svfiprintf_r+0x188>
 800339c:	9b03      	ldr	r3, [sp, #12]
 800339e:	1d1a      	adds	r2, r3, #4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	9203      	str	r2, [sp, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bfb8      	it	lt
 80033a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80033ac:	3402      	adds	r4, #2
 80033ae:	9305      	str	r3, [sp, #20]
 80033b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800347c <_svfiprintf_r+0x1fc>
 80033b4:	7821      	ldrb	r1, [r4, #0]
 80033b6:	2203      	movs	r2, #3
 80033b8:	4650      	mov	r0, sl
 80033ba:	f7fc ff31 	bl	8000220 <memchr>
 80033be:	b140      	cbz	r0, 80033d2 <_svfiprintf_r+0x152>
 80033c0:	2340      	movs	r3, #64	; 0x40
 80033c2:	eba0 000a 	sub.w	r0, r0, sl
 80033c6:	fa03 f000 	lsl.w	r0, r3, r0
 80033ca:	9b04      	ldr	r3, [sp, #16]
 80033cc:	4303      	orrs	r3, r0
 80033ce:	3401      	adds	r4, #1
 80033d0:	9304      	str	r3, [sp, #16]
 80033d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d6:	4826      	ldr	r0, [pc, #152]	; (8003470 <_svfiprintf_r+0x1f0>)
 80033d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033dc:	2206      	movs	r2, #6
 80033de:	f7fc ff1f 	bl	8000220 <memchr>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d038      	beq.n	8003458 <_svfiprintf_r+0x1d8>
 80033e6:	4b23      	ldr	r3, [pc, #140]	; (8003474 <_svfiprintf_r+0x1f4>)
 80033e8:	bb1b      	cbnz	r3, 8003432 <_svfiprintf_r+0x1b2>
 80033ea:	9b03      	ldr	r3, [sp, #12]
 80033ec:	3307      	adds	r3, #7
 80033ee:	f023 0307 	bic.w	r3, r3, #7
 80033f2:	3308      	adds	r3, #8
 80033f4:	9303      	str	r3, [sp, #12]
 80033f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f8:	4433      	add	r3, r6
 80033fa:	9309      	str	r3, [sp, #36]	; 0x24
 80033fc:	e767      	b.n	80032ce <_svfiprintf_r+0x4e>
 80033fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003402:	460c      	mov	r4, r1
 8003404:	2001      	movs	r0, #1
 8003406:	e7a5      	b.n	8003354 <_svfiprintf_r+0xd4>
 8003408:	2300      	movs	r3, #0
 800340a:	3401      	adds	r4, #1
 800340c:	9305      	str	r3, [sp, #20]
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0c0a 	mov.w	ip, #10
 8003414:	4620      	mov	r0, r4
 8003416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800341a:	3a30      	subs	r2, #48	; 0x30
 800341c:	2a09      	cmp	r2, #9
 800341e:	d903      	bls.n	8003428 <_svfiprintf_r+0x1a8>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0c5      	beq.n	80033b0 <_svfiprintf_r+0x130>
 8003424:	9105      	str	r1, [sp, #20]
 8003426:	e7c3      	b.n	80033b0 <_svfiprintf_r+0x130>
 8003428:	fb0c 2101 	mla	r1, ip, r1, r2
 800342c:	4604      	mov	r4, r0
 800342e:	2301      	movs	r3, #1
 8003430:	e7f0      	b.n	8003414 <_svfiprintf_r+0x194>
 8003432:	ab03      	add	r3, sp, #12
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	462a      	mov	r2, r5
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <_svfiprintf_r+0x1f8>)
 800343a:	a904      	add	r1, sp, #16
 800343c:	4638      	mov	r0, r7
 800343e:	f3af 8000 	nop.w
 8003442:	1c42      	adds	r2, r0, #1
 8003444:	4606      	mov	r6, r0
 8003446:	d1d6      	bne.n	80033f6 <_svfiprintf_r+0x176>
 8003448:	89ab      	ldrh	r3, [r5, #12]
 800344a:	065b      	lsls	r3, r3, #25
 800344c:	f53f af2c 	bmi.w	80032a8 <_svfiprintf_r+0x28>
 8003450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003452:	b01d      	add	sp, #116	; 0x74
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003458:	ab03      	add	r3, sp, #12
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	462a      	mov	r2, r5
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <_svfiprintf_r+0x1f8>)
 8003460:	a904      	add	r1, sp, #16
 8003462:	4638      	mov	r0, r7
 8003464:	f000 f87a 	bl	800355c <_printf_i>
 8003468:	e7eb      	b.n	8003442 <_svfiprintf_r+0x1c2>
 800346a:	bf00      	nop
 800346c:	08003ac0 	.word	0x08003ac0
 8003470:	08003aca 	.word	0x08003aca
 8003474:	00000000 	.word	0x00000000
 8003478:	080031c9 	.word	0x080031c9
 800347c:	08003ac6 	.word	0x08003ac6

08003480 <_printf_common>:
 8003480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003484:	4616      	mov	r6, r2
 8003486:	4699      	mov	r9, r3
 8003488:	688a      	ldr	r2, [r1, #8]
 800348a:	690b      	ldr	r3, [r1, #16]
 800348c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003490:	4293      	cmp	r3, r2
 8003492:	bfb8      	it	lt
 8003494:	4613      	movlt	r3, r2
 8003496:	6033      	str	r3, [r6, #0]
 8003498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800349c:	4607      	mov	r7, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	b10a      	cbz	r2, 80034a6 <_printf_common+0x26>
 80034a2:	3301      	adds	r3, #1
 80034a4:	6033      	str	r3, [r6, #0]
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	0699      	lsls	r1, r3, #26
 80034aa:	bf42      	ittt	mi
 80034ac:	6833      	ldrmi	r3, [r6, #0]
 80034ae:	3302      	addmi	r3, #2
 80034b0:	6033      	strmi	r3, [r6, #0]
 80034b2:	6825      	ldr	r5, [r4, #0]
 80034b4:	f015 0506 	ands.w	r5, r5, #6
 80034b8:	d106      	bne.n	80034c8 <_printf_common+0x48>
 80034ba:	f104 0a19 	add.w	sl, r4, #25
 80034be:	68e3      	ldr	r3, [r4, #12]
 80034c0:	6832      	ldr	r2, [r6, #0]
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	42ab      	cmp	r3, r5
 80034c6:	dc26      	bgt.n	8003516 <_printf_common+0x96>
 80034c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034cc:	1e13      	subs	r3, r2, #0
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	bf18      	it	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	0692      	lsls	r2, r2, #26
 80034d6:	d42b      	bmi.n	8003530 <_printf_common+0xb0>
 80034d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034dc:	4649      	mov	r1, r9
 80034de:	4638      	mov	r0, r7
 80034e0:	47c0      	blx	r8
 80034e2:	3001      	adds	r0, #1
 80034e4:	d01e      	beq.n	8003524 <_printf_common+0xa4>
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	68e5      	ldr	r5, [r4, #12]
 80034ea:	6832      	ldr	r2, [r6, #0]
 80034ec:	f003 0306 	and.w	r3, r3, #6
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	bf08      	it	eq
 80034f4:	1aad      	subeq	r5, r5, r2
 80034f6:	68a3      	ldr	r3, [r4, #8]
 80034f8:	6922      	ldr	r2, [r4, #16]
 80034fa:	bf0c      	ite	eq
 80034fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003500:	2500      	movne	r5, #0
 8003502:	4293      	cmp	r3, r2
 8003504:	bfc4      	itt	gt
 8003506:	1a9b      	subgt	r3, r3, r2
 8003508:	18ed      	addgt	r5, r5, r3
 800350a:	2600      	movs	r6, #0
 800350c:	341a      	adds	r4, #26
 800350e:	42b5      	cmp	r5, r6
 8003510:	d11a      	bne.n	8003548 <_printf_common+0xc8>
 8003512:	2000      	movs	r0, #0
 8003514:	e008      	b.n	8003528 <_printf_common+0xa8>
 8003516:	2301      	movs	r3, #1
 8003518:	4652      	mov	r2, sl
 800351a:	4649      	mov	r1, r9
 800351c:	4638      	mov	r0, r7
 800351e:	47c0      	blx	r8
 8003520:	3001      	adds	r0, #1
 8003522:	d103      	bne.n	800352c <_printf_common+0xac>
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	3501      	adds	r5, #1
 800352e:	e7c6      	b.n	80034be <_printf_common+0x3e>
 8003530:	18e1      	adds	r1, r4, r3
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	2030      	movs	r0, #48	; 0x30
 8003536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800353a:	4422      	add	r2, r4
 800353c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003544:	3302      	adds	r3, #2
 8003546:	e7c7      	b.n	80034d8 <_printf_common+0x58>
 8003548:	2301      	movs	r3, #1
 800354a:	4622      	mov	r2, r4
 800354c:	4649      	mov	r1, r9
 800354e:	4638      	mov	r0, r7
 8003550:	47c0      	blx	r8
 8003552:	3001      	adds	r0, #1
 8003554:	d0e6      	beq.n	8003524 <_printf_common+0xa4>
 8003556:	3601      	adds	r6, #1
 8003558:	e7d9      	b.n	800350e <_printf_common+0x8e>
	...

0800355c <_printf_i>:
 800355c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	7e0f      	ldrb	r7, [r1, #24]
 8003562:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003564:	2f78      	cmp	r7, #120	; 0x78
 8003566:	4691      	mov	r9, r2
 8003568:	4680      	mov	r8, r0
 800356a:	460c      	mov	r4, r1
 800356c:	469a      	mov	sl, r3
 800356e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003572:	d807      	bhi.n	8003584 <_printf_i+0x28>
 8003574:	2f62      	cmp	r7, #98	; 0x62
 8003576:	d80a      	bhi.n	800358e <_printf_i+0x32>
 8003578:	2f00      	cmp	r7, #0
 800357a:	f000 80d8 	beq.w	800372e <_printf_i+0x1d2>
 800357e:	2f58      	cmp	r7, #88	; 0x58
 8003580:	f000 80a3 	beq.w	80036ca <_printf_i+0x16e>
 8003584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800358c:	e03a      	b.n	8003604 <_printf_i+0xa8>
 800358e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003592:	2b15      	cmp	r3, #21
 8003594:	d8f6      	bhi.n	8003584 <_printf_i+0x28>
 8003596:	a101      	add	r1, pc, #4	; (adr r1, 800359c <_printf_i+0x40>)
 8003598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800359c:	080035f5 	.word	0x080035f5
 80035a0:	08003609 	.word	0x08003609
 80035a4:	08003585 	.word	0x08003585
 80035a8:	08003585 	.word	0x08003585
 80035ac:	08003585 	.word	0x08003585
 80035b0:	08003585 	.word	0x08003585
 80035b4:	08003609 	.word	0x08003609
 80035b8:	08003585 	.word	0x08003585
 80035bc:	08003585 	.word	0x08003585
 80035c0:	08003585 	.word	0x08003585
 80035c4:	08003585 	.word	0x08003585
 80035c8:	08003715 	.word	0x08003715
 80035cc:	08003639 	.word	0x08003639
 80035d0:	080036f7 	.word	0x080036f7
 80035d4:	08003585 	.word	0x08003585
 80035d8:	08003585 	.word	0x08003585
 80035dc:	08003737 	.word	0x08003737
 80035e0:	08003585 	.word	0x08003585
 80035e4:	08003639 	.word	0x08003639
 80035e8:	08003585 	.word	0x08003585
 80035ec:	08003585 	.word	0x08003585
 80035f0:	080036ff 	.word	0x080036ff
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	1d1a      	adds	r2, r3, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	602a      	str	r2, [r5, #0]
 80035fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003604:	2301      	movs	r3, #1
 8003606:	e0a3      	b.n	8003750 <_printf_i+0x1f4>
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	6829      	ldr	r1, [r5, #0]
 800360c:	0606      	lsls	r6, r0, #24
 800360e:	f101 0304 	add.w	r3, r1, #4
 8003612:	d50a      	bpl.n	800362a <_printf_i+0xce>
 8003614:	680e      	ldr	r6, [r1, #0]
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	2e00      	cmp	r6, #0
 800361a:	da03      	bge.n	8003624 <_printf_i+0xc8>
 800361c:	232d      	movs	r3, #45	; 0x2d
 800361e:	4276      	negs	r6, r6
 8003620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003624:	485e      	ldr	r0, [pc, #376]	; (80037a0 <_printf_i+0x244>)
 8003626:	230a      	movs	r3, #10
 8003628:	e019      	b.n	800365e <_printf_i+0x102>
 800362a:	680e      	ldr	r6, [r1, #0]
 800362c:	602b      	str	r3, [r5, #0]
 800362e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003632:	bf18      	it	ne
 8003634:	b236      	sxthne	r6, r6
 8003636:	e7ef      	b.n	8003618 <_printf_i+0xbc>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	1d19      	adds	r1, r3, #4
 800363e:	6029      	str	r1, [r5, #0]
 8003640:	0601      	lsls	r1, r0, #24
 8003642:	d501      	bpl.n	8003648 <_printf_i+0xec>
 8003644:	681e      	ldr	r6, [r3, #0]
 8003646:	e002      	b.n	800364e <_printf_i+0xf2>
 8003648:	0646      	lsls	r6, r0, #25
 800364a:	d5fb      	bpl.n	8003644 <_printf_i+0xe8>
 800364c:	881e      	ldrh	r6, [r3, #0]
 800364e:	4854      	ldr	r0, [pc, #336]	; (80037a0 <_printf_i+0x244>)
 8003650:	2f6f      	cmp	r7, #111	; 0x6f
 8003652:	bf0c      	ite	eq
 8003654:	2308      	moveq	r3, #8
 8003656:	230a      	movne	r3, #10
 8003658:	2100      	movs	r1, #0
 800365a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365e:	6865      	ldr	r5, [r4, #4]
 8003660:	60a5      	str	r5, [r4, #8]
 8003662:	2d00      	cmp	r5, #0
 8003664:	bfa2      	ittt	ge
 8003666:	6821      	ldrge	r1, [r4, #0]
 8003668:	f021 0104 	bicge.w	r1, r1, #4
 800366c:	6021      	strge	r1, [r4, #0]
 800366e:	b90e      	cbnz	r6, 8003674 <_printf_i+0x118>
 8003670:	2d00      	cmp	r5, #0
 8003672:	d04d      	beq.n	8003710 <_printf_i+0x1b4>
 8003674:	4615      	mov	r5, r2
 8003676:	fbb6 f1f3 	udiv	r1, r6, r3
 800367a:	fb03 6711 	mls	r7, r3, r1, r6
 800367e:	5dc7      	ldrb	r7, [r0, r7]
 8003680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003684:	4637      	mov	r7, r6
 8003686:	42bb      	cmp	r3, r7
 8003688:	460e      	mov	r6, r1
 800368a:	d9f4      	bls.n	8003676 <_printf_i+0x11a>
 800368c:	2b08      	cmp	r3, #8
 800368e:	d10b      	bne.n	80036a8 <_printf_i+0x14c>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	07de      	lsls	r6, r3, #31
 8003694:	d508      	bpl.n	80036a8 <_printf_i+0x14c>
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	6861      	ldr	r1, [r4, #4]
 800369a:	4299      	cmp	r1, r3
 800369c:	bfde      	ittt	le
 800369e:	2330      	movle	r3, #48	; 0x30
 80036a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036a8:	1b52      	subs	r2, r2, r5
 80036aa:	6122      	str	r2, [r4, #16]
 80036ac:	f8cd a000 	str.w	sl, [sp]
 80036b0:	464b      	mov	r3, r9
 80036b2:	aa03      	add	r2, sp, #12
 80036b4:	4621      	mov	r1, r4
 80036b6:	4640      	mov	r0, r8
 80036b8:	f7ff fee2 	bl	8003480 <_printf_common>
 80036bc:	3001      	adds	r0, #1
 80036be:	d14c      	bne.n	800375a <_printf_i+0x1fe>
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b004      	add	sp, #16
 80036c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ca:	4835      	ldr	r0, [pc, #212]	; (80037a0 <_printf_i+0x244>)
 80036cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036d0:	6829      	ldr	r1, [r5, #0]
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80036d8:	6029      	str	r1, [r5, #0]
 80036da:	061d      	lsls	r5, r3, #24
 80036dc:	d514      	bpl.n	8003708 <_printf_i+0x1ac>
 80036de:	07df      	lsls	r7, r3, #31
 80036e0:	bf44      	itt	mi
 80036e2:	f043 0320 	orrmi.w	r3, r3, #32
 80036e6:	6023      	strmi	r3, [r4, #0]
 80036e8:	b91e      	cbnz	r6, 80036f2 <_printf_i+0x196>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f023 0320 	bic.w	r3, r3, #32
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	2310      	movs	r3, #16
 80036f4:	e7b0      	b.n	8003658 <_printf_i+0xfc>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	f043 0320 	orr.w	r3, r3, #32
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	2378      	movs	r3, #120	; 0x78
 8003700:	4828      	ldr	r0, [pc, #160]	; (80037a4 <_printf_i+0x248>)
 8003702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003706:	e7e3      	b.n	80036d0 <_printf_i+0x174>
 8003708:	0659      	lsls	r1, r3, #25
 800370a:	bf48      	it	mi
 800370c:	b2b6      	uxthmi	r6, r6
 800370e:	e7e6      	b.n	80036de <_printf_i+0x182>
 8003710:	4615      	mov	r5, r2
 8003712:	e7bb      	b.n	800368c <_printf_i+0x130>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	6826      	ldr	r6, [r4, #0]
 8003718:	6961      	ldr	r1, [r4, #20]
 800371a:	1d18      	adds	r0, r3, #4
 800371c:	6028      	str	r0, [r5, #0]
 800371e:	0635      	lsls	r5, r6, #24
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	d501      	bpl.n	8003728 <_printf_i+0x1cc>
 8003724:	6019      	str	r1, [r3, #0]
 8003726:	e002      	b.n	800372e <_printf_i+0x1d2>
 8003728:	0670      	lsls	r0, r6, #25
 800372a:	d5fb      	bpl.n	8003724 <_printf_i+0x1c8>
 800372c:	8019      	strh	r1, [r3, #0]
 800372e:	2300      	movs	r3, #0
 8003730:	6123      	str	r3, [r4, #16]
 8003732:	4615      	mov	r5, r2
 8003734:	e7ba      	b.n	80036ac <_printf_i+0x150>
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	1d1a      	adds	r2, r3, #4
 800373a:	602a      	str	r2, [r5, #0]
 800373c:	681d      	ldr	r5, [r3, #0]
 800373e:	6862      	ldr	r2, [r4, #4]
 8003740:	2100      	movs	r1, #0
 8003742:	4628      	mov	r0, r5
 8003744:	f7fc fd6c 	bl	8000220 <memchr>
 8003748:	b108      	cbz	r0, 800374e <_printf_i+0x1f2>
 800374a:	1b40      	subs	r0, r0, r5
 800374c:	6060      	str	r0, [r4, #4]
 800374e:	6863      	ldr	r3, [r4, #4]
 8003750:	6123      	str	r3, [r4, #16]
 8003752:	2300      	movs	r3, #0
 8003754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003758:	e7a8      	b.n	80036ac <_printf_i+0x150>
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	462a      	mov	r2, r5
 800375e:	4649      	mov	r1, r9
 8003760:	4640      	mov	r0, r8
 8003762:	47d0      	blx	sl
 8003764:	3001      	adds	r0, #1
 8003766:	d0ab      	beq.n	80036c0 <_printf_i+0x164>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	079b      	lsls	r3, r3, #30
 800376c:	d413      	bmi.n	8003796 <_printf_i+0x23a>
 800376e:	68e0      	ldr	r0, [r4, #12]
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	4298      	cmp	r0, r3
 8003774:	bfb8      	it	lt
 8003776:	4618      	movlt	r0, r3
 8003778:	e7a4      	b.n	80036c4 <_printf_i+0x168>
 800377a:	2301      	movs	r3, #1
 800377c:	4632      	mov	r2, r6
 800377e:	4649      	mov	r1, r9
 8003780:	4640      	mov	r0, r8
 8003782:	47d0      	blx	sl
 8003784:	3001      	adds	r0, #1
 8003786:	d09b      	beq.n	80036c0 <_printf_i+0x164>
 8003788:	3501      	adds	r5, #1
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	9903      	ldr	r1, [sp, #12]
 800378e:	1a5b      	subs	r3, r3, r1
 8003790:	42ab      	cmp	r3, r5
 8003792:	dcf2      	bgt.n	800377a <_printf_i+0x21e>
 8003794:	e7eb      	b.n	800376e <_printf_i+0x212>
 8003796:	2500      	movs	r5, #0
 8003798:	f104 0619 	add.w	r6, r4, #25
 800379c:	e7f5      	b.n	800378a <_printf_i+0x22e>
 800379e:	bf00      	nop
 80037a0:	08003ad1 	.word	0x08003ad1
 80037a4:	08003ae2 	.word	0x08003ae2

080037a8 <memcpy>:
 80037a8:	440a      	add	r2, r1
 80037aa:	4291      	cmp	r1, r2
 80037ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80037b0:	d100      	bne.n	80037b4 <memcpy+0xc>
 80037b2:	4770      	bx	lr
 80037b4:	b510      	push	{r4, lr}
 80037b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037be:	4291      	cmp	r1, r2
 80037c0:	d1f9      	bne.n	80037b6 <memcpy+0xe>
 80037c2:	bd10      	pop	{r4, pc}

080037c4 <memmove>:
 80037c4:	4288      	cmp	r0, r1
 80037c6:	b510      	push	{r4, lr}
 80037c8:	eb01 0402 	add.w	r4, r1, r2
 80037cc:	d902      	bls.n	80037d4 <memmove+0x10>
 80037ce:	4284      	cmp	r4, r0
 80037d0:	4623      	mov	r3, r4
 80037d2:	d807      	bhi.n	80037e4 <memmove+0x20>
 80037d4:	1e43      	subs	r3, r0, #1
 80037d6:	42a1      	cmp	r1, r4
 80037d8:	d008      	beq.n	80037ec <memmove+0x28>
 80037da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037e2:	e7f8      	b.n	80037d6 <memmove+0x12>
 80037e4:	4402      	add	r2, r0
 80037e6:	4601      	mov	r1, r0
 80037e8:	428a      	cmp	r2, r1
 80037ea:	d100      	bne.n	80037ee <memmove+0x2a>
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037f6:	e7f7      	b.n	80037e8 <memmove+0x24>

080037f8 <_free_r>:
 80037f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037fa:	2900      	cmp	r1, #0
 80037fc:	d044      	beq.n	8003888 <_free_r+0x90>
 80037fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003802:	9001      	str	r0, [sp, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f1a1 0404 	sub.w	r4, r1, #4
 800380a:	bfb8      	it	lt
 800380c:	18e4      	addlt	r4, r4, r3
 800380e:	f000 f913 	bl	8003a38 <__malloc_lock>
 8003812:	4a1e      	ldr	r2, [pc, #120]	; (800388c <_free_r+0x94>)
 8003814:	9801      	ldr	r0, [sp, #4]
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	b933      	cbnz	r3, 8003828 <_free_r+0x30>
 800381a:	6063      	str	r3, [r4, #4]
 800381c:	6014      	str	r4, [r2, #0]
 800381e:	b003      	add	sp, #12
 8003820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003824:	f000 b90e 	b.w	8003a44 <__malloc_unlock>
 8003828:	42a3      	cmp	r3, r4
 800382a:	d908      	bls.n	800383e <_free_r+0x46>
 800382c:	6825      	ldr	r5, [r4, #0]
 800382e:	1961      	adds	r1, r4, r5
 8003830:	428b      	cmp	r3, r1
 8003832:	bf01      	itttt	eq
 8003834:	6819      	ldreq	r1, [r3, #0]
 8003836:	685b      	ldreq	r3, [r3, #4]
 8003838:	1949      	addeq	r1, r1, r5
 800383a:	6021      	streq	r1, [r4, #0]
 800383c:	e7ed      	b.n	800381a <_free_r+0x22>
 800383e:	461a      	mov	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b10b      	cbz	r3, 8003848 <_free_r+0x50>
 8003844:	42a3      	cmp	r3, r4
 8003846:	d9fa      	bls.n	800383e <_free_r+0x46>
 8003848:	6811      	ldr	r1, [r2, #0]
 800384a:	1855      	adds	r5, r2, r1
 800384c:	42a5      	cmp	r5, r4
 800384e:	d10b      	bne.n	8003868 <_free_r+0x70>
 8003850:	6824      	ldr	r4, [r4, #0]
 8003852:	4421      	add	r1, r4
 8003854:	1854      	adds	r4, r2, r1
 8003856:	42a3      	cmp	r3, r4
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	d1e0      	bne.n	800381e <_free_r+0x26>
 800385c:	681c      	ldr	r4, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	6053      	str	r3, [r2, #4]
 8003862:	4421      	add	r1, r4
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	e7da      	b.n	800381e <_free_r+0x26>
 8003868:	d902      	bls.n	8003870 <_free_r+0x78>
 800386a:	230c      	movs	r3, #12
 800386c:	6003      	str	r3, [r0, #0]
 800386e:	e7d6      	b.n	800381e <_free_r+0x26>
 8003870:	6825      	ldr	r5, [r4, #0]
 8003872:	1961      	adds	r1, r4, r5
 8003874:	428b      	cmp	r3, r1
 8003876:	bf04      	itt	eq
 8003878:	6819      	ldreq	r1, [r3, #0]
 800387a:	685b      	ldreq	r3, [r3, #4]
 800387c:	6063      	str	r3, [r4, #4]
 800387e:	bf04      	itt	eq
 8003880:	1949      	addeq	r1, r1, r5
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	6054      	str	r4, [r2, #4]
 8003886:	e7ca      	b.n	800381e <_free_r+0x26>
 8003888:	b003      	add	sp, #12
 800388a:	bd30      	pop	{r4, r5, pc}
 800388c:	20000160 	.word	0x20000160

08003890 <sbrk_aligned>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4e0e      	ldr	r6, [pc, #56]	; (80038cc <sbrk_aligned+0x3c>)
 8003894:	460c      	mov	r4, r1
 8003896:	6831      	ldr	r1, [r6, #0]
 8003898:	4605      	mov	r5, r0
 800389a:	b911      	cbnz	r1, 80038a2 <sbrk_aligned+0x12>
 800389c:	f000 f8bc 	bl	8003a18 <_sbrk_r>
 80038a0:	6030      	str	r0, [r6, #0]
 80038a2:	4621      	mov	r1, r4
 80038a4:	4628      	mov	r0, r5
 80038a6:	f000 f8b7 	bl	8003a18 <_sbrk_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	d00a      	beq.n	80038c4 <sbrk_aligned+0x34>
 80038ae:	1cc4      	adds	r4, r0, #3
 80038b0:	f024 0403 	bic.w	r4, r4, #3
 80038b4:	42a0      	cmp	r0, r4
 80038b6:	d007      	beq.n	80038c8 <sbrk_aligned+0x38>
 80038b8:	1a21      	subs	r1, r4, r0
 80038ba:	4628      	mov	r0, r5
 80038bc:	f000 f8ac 	bl	8003a18 <_sbrk_r>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d101      	bne.n	80038c8 <sbrk_aligned+0x38>
 80038c4:	f04f 34ff 	mov.w	r4, #4294967295
 80038c8:	4620      	mov	r0, r4
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	20000164 	.word	0x20000164

080038d0 <_malloc_r>:
 80038d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d4:	1ccd      	adds	r5, r1, #3
 80038d6:	f025 0503 	bic.w	r5, r5, #3
 80038da:	3508      	adds	r5, #8
 80038dc:	2d0c      	cmp	r5, #12
 80038de:	bf38      	it	cc
 80038e0:	250c      	movcc	r5, #12
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	4607      	mov	r7, r0
 80038e6:	db01      	blt.n	80038ec <_malloc_r+0x1c>
 80038e8:	42a9      	cmp	r1, r5
 80038ea:	d905      	bls.n	80038f8 <_malloc_r+0x28>
 80038ec:	230c      	movs	r3, #12
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	2600      	movs	r6, #0
 80038f2:	4630      	mov	r0, r6
 80038f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f8:	4e2e      	ldr	r6, [pc, #184]	; (80039b4 <_malloc_r+0xe4>)
 80038fa:	f000 f89d 	bl	8003a38 <__malloc_lock>
 80038fe:	6833      	ldr	r3, [r6, #0]
 8003900:	461c      	mov	r4, r3
 8003902:	bb34      	cbnz	r4, 8003952 <_malloc_r+0x82>
 8003904:	4629      	mov	r1, r5
 8003906:	4638      	mov	r0, r7
 8003908:	f7ff ffc2 	bl	8003890 <sbrk_aligned>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	4604      	mov	r4, r0
 8003910:	d14d      	bne.n	80039ae <_malloc_r+0xde>
 8003912:	6834      	ldr	r4, [r6, #0]
 8003914:	4626      	mov	r6, r4
 8003916:	2e00      	cmp	r6, #0
 8003918:	d140      	bne.n	800399c <_malloc_r+0xcc>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	4631      	mov	r1, r6
 800391e:	4638      	mov	r0, r7
 8003920:	eb04 0803 	add.w	r8, r4, r3
 8003924:	f000 f878 	bl	8003a18 <_sbrk_r>
 8003928:	4580      	cmp	r8, r0
 800392a:	d13a      	bne.n	80039a2 <_malloc_r+0xd2>
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	3503      	adds	r5, #3
 8003930:	1a6d      	subs	r5, r5, r1
 8003932:	f025 0503 	bic.w	r5, r5, #3
 8003936:	3508      	adds	r5, #8
 8003938:	2d0c      	cmp	r5, #12
 800393a:	bf38      	it	cc
 800393c:	250c      	movcc	r5, #12
 800393e:	4629      	mov	r1, r5
 8003940:	4638      	mov	r0, r7
 8003942:	f7ff ffa5 	bl	8003890 <sbrk_aligned>
 8003946:	3001      	adds	r0, #1
 8003948:	d02b      	beq.n	80039a2 <_malloc_r+0xd2>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	442b      	add	r3, r5
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	e00e      	b.n	8003970 <_malloc_r+0xa0>
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	1b52      	subs	r2, r2, r5
 8003956:	d41e      	bmi.n	8003996 <_malloc_r+0xc6>
 8003958:	2a0b      	cmp	r2, #11
 800395a:	d916      	bls.n	800398a <_malloc_r+0xba>
 800395c:	1961      	adds	r1, r4, r5
 800395e:	42a3      	cmp	r3, r4
 8003960:	6025      	str	r5, [r4, #0]
 8003962:	bf18      	it	ne
 8003964:	6059      	strne	r1, [r3, #4]
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	bf08      	it	eq
 800396a:	6031      	streq	r1, [r6, #0]
 800396c:	5162      	str	r2, [r4, r5]
 800396e:	604b      	str	r3, [r1, #4]
 8003970:	4638      	mov	r0, r7
 8003972:	f104 060b 	add.w	r6, r4, #11
 8003976:	f000 f865 	bl	8003a44 <__malloc_unlock>
 800397a:	f026 0607 	bic.w	r6, r6, #7
 800397e:	1d23      	adds	r3, r4, #4
 8003980:	1af2      	subs	r2, r6, r3
 8003982:	d0b6      	beq.n	80038f2 <_malloc_r+0x22>
 8003984:	1b9b      	subs	r3, r3, r6
 8003986:	50a3      	str	r3, [r4, r2]
 8003988:	e7b3      	b.n	80038f2 <_malloc_r+0x22>
 800398a:	6862      	ldr	r2, [r4, #4]
 800398c:	42a3      	cmp	r3, r4
 800398e:	bf0c      	ite	eq
 8003990:	6032      	streq	r2, [r6, #0]
 8003992:	605a      	strne	r2, [r3, #4]
 8003994:	e7ec      	b.n	8003970 <_malloc_r+0xa0>
 8003996:	4623      	mov	r3, r4
 8003998:	6864      	ldr	r4, [r4, #4]
 800399a:	e7b2      	b.n	8003902 <_malloc_r+0x32>
 800399c:	4634      	mov	r4, r6
 800399e:	6876      	ldr	r6, [r6, #4]
 80039a0:	e7b9      	b.n	8003916 <_malloc_r+0x46>
 80039a2:	230c      	movs	r3, #12
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4638      	mov	r0, r7
 80039a8:	f000 f84c 	bl	8003a44 <__malloc_unlock>
 80039ac:	e7a1      	b.n	80038f2 <_malloc_r+0x22>
 80039ae:	6025      	str	r5, [r4, #0]
 80039b0:	e7de      	b.n	8003970 <_malloc_r+0xa0>
 80039b2:	bf00      	nop
 80039b4:	20000160 	.word	0x20000160

080039b8 <_realloc_r>:
 80039b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039bc:	4680      	mov	r8, r0
 80039be:	4614      	mov	r4, r2
 80039c0:	460e      	mov	r6, r1
 80039c2:	b921      	cbnz	r1, 80039ce <_realloc_r+0x16>
 80039c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	4611      	mov	r1, r2
 80039ca:	f7ff bf81 	b.w	80038d0 <_malloc_r>
 80039ce:	b92a      	cbnz	r2, 80039dc <_realloc_r+0x24>
 80039d0:	f7ff ff12 	bl	80037f8 <_free_r>
 80039d4:	4625      	mov	r5, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	f000 f838 	bl	8003a50 <_malloc_usable_size_r>
 80039e0:	4284      	cmp	r4, r0
 80039e2:	4607      	mov	r7, r0
 80039e4:	d802      	bhi.n	80039ec <_realloc_r+0x34>
 80039e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039ea:	d812      	bhi.n	8003a12 <_realloc_r+0x5a>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff ff6e 	bl	80038d0 <_malloc_r>
 80039f4:	4605      	mov	r5, r0
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d0ed      	beq.n	80039d6 <_realloc_r+0x1e>
 80039fa:	42bc      	cmp	r4, r7
 80039fc:	4622      	mov	r2, r4
 80039fe:	4631      	mov	r1, r6
 8003a00:	bf28      	it	cs
 8003a02:	463a      	movcs	r2, r7
 8003a04:	f7ff fed0 	bl	80037a8 <memcpy>
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	f7ff fef4 	bl	80037f8 <_free_r>
 8003a10:	e7e1      	b.n	80039d6 <_realloc_r+0x1e>
 8003a12:	4635      	mov	r5, r6
 8003a14:	e7df      	b.n	80039d6 <_realloc_r+0x1e>
	...

08003a18 <_sbrk_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	4d06      	ldr	r5, [pc, #24]	; (8003a34 <_sbrk_r+0x1c>)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	f7fd f914 	bl	8000c50 <_sbrk>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_sbrk_r+0x1a>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_sbrk_r+0x1a>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20000168 	.word	0x20000168

08003a38 <__malloc_lock>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__malloc_lock+0x8>)
 8003a3a:	f000 b811 	b.w	8003a60 <__retarget_lock_acquire_recursive>
 8003a3e:	bf00      	nop
 8003a40:	2000016c 	.word	0x2000016c

08003a44 <__malloc_unlock>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__malloc_unlock+0x8>)
 8003a46:	f000 b80c 	b.w	8003a62 <__retarget_lock_release_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	2000016c 	.word	0x2000016c

08003a50 <_malloc_usable_size_r>:
 8003a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a54:	1f18      	subs	r0, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfbc      	itt	lt
 8003a5a:	580b      	ldrlt	r3, [r1, r0]
 8003a5c:	18c0      	addlt	r0, r0, r3
 8003a5e:	4770      	bx	lr

08003a60 <__retarget_lock_acquire_recursive>:
 8003a60:	4770      	bx	lr

08003a62 <__retarget_lock_release_recursive>:
 8003a62:	4770      	bx	lr

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr
