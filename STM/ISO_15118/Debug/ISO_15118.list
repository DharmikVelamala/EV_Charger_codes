
ISO_15118.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000262c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002808  08002808  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002810  08002810  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002824  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002824  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb77  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ef  00000000  00000000  0002cbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  0002f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020eba  00000000  00000000  0002fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db3a  00000000  00000000  00050a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8fc  00000000  00000000  0005e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012aea0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f4  00000000  00000000  0012aef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080027d8 	.word	0x080027d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080027d8 	.word	0x080027d8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa70 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f808 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8f0 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f8c4 	bl	80006a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800051c:	f000 f870 	bl	8000600 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x18>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2234      	movs	r2, #52	; 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 f948 	bl	80027c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <SystemClock_Config+0xd4>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <SystemClock_Config+0xd4>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <SystemClock_Config+0xd4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <SystemClock_Config+0xd8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a22      	ldr	r2, [pc, #136]	; (80005fc <SystemClock_Config+0xd8>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <SystemClock_Config+0xd8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000598:	2310      	movs	r3, #16
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f852 	bl	800165c <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005be:	f000 f8f5 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fcf2 	bl	8000fc8 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ea:	f000 f8df 	bl	80007ac <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_TIM2_Init+0xa0>)
 800061e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000622:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_TIM2_Init+0xa0>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_TIM2_Init+0xa0>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_TIM2_Init+0xa0>)
 8000632:	f04f 32ff 	mov.w	r2, #4294967295
 8000636:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_TIM2_Init+0xa0>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM2_Init+0xa0>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000644:	4816      	ldr	r0, [pc, #88]	; (80006a0 <MX_TIM2_Init+0xa0>)
 8000646:	f001 faa7 	bl	8001b98 <HAL_TIM_IC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000650:	f000 f8ac 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	480f      	ldr	r0, [pc, #60]	; (80006a0 <MX_TIM2_Init+0xa0>)
 8000664:	f001 fd4e 	bl	8002104 <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800066e:	f000 f89d 	bl	80007ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000676:	2301      	movs	r3, #1
 8000678:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_TIM2_Init+0xa0>)
 800068a:	f001 fad4 	bl	8001c36 <HAL_TIM_IC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000694:	f000 f88a 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000028 	.word	0x20000028

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART2_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006dc:	f001 fd8e 	bl	80021fc <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f861 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000070 	.word	0x20000070
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_GPIO_Init+0xac>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <MX_GPIO_Init+0xac>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800077e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000784:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xb0>)
 8000796:	f000 fa83 	bl	8000ca0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020800 	.word	0x40020800

080007ac <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f000 fa1e 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000828:	d12b      	bne.n	8000882 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_TIM_IC_MspInit+0x84>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <HAL_TIM_IC_MspInit+0x84>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_TIM_IC_MspInit+0x84>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_TIM_IC_MspInit+0x84>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_TIM_IC_MspInit+0x84>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_TIM_IC_MspInit+0x84>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000862:	2301      	movs	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000872:	2301      	movs	r3, #1
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <HAL_TIM_IC_MspInit+0x88>)
 800087e:	f000 fa0f 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12b      	bne.n	800090e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_UART_MspInit+0x88>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_UART_MspInit+0x88>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_UART_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fe:	2307      	movs	r3, #7
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_UART_MspInit+0x8c>)
 800090a:	f000 f9c9 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f890 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a2:	490e      	ldr	r1, [pc, #56]	; (80009dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b8:	4c0b      	ldr	r4, [pc, #44]	; (80009e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c6:	f7ff ffd7 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f001 fed9 	bl	8002780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fd9b 	bl	8000508 <main>
  bx  lr    
 80009d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	200000b8 	.word	0x200000b8

080009ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_Init+0x40>)
 80009fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_Init+0x40>)
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x40>)
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f90d 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fec8 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023c00 	.word	0x40023c00

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f917 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f8ed 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000b4 	.word	0x200000b4

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000b4 	.word	0x200000b4

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff47 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff5c 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb0 	bl	8000bf4 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e165      	b.n	8000f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8154 	bne.w	8000f82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d005      	beq.n	8000cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80ae 	beq.w	8000f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b5a      	ldr	r3, [pc, #360]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4f      	ldr	r2, [pc, #316]	; (8000fa8 <HAL_GPIO_Init+0x308>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4d      	ldr	r2, [pc, #308]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4b      	ldr	r2, [pc, #300]	; (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x206>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x202>
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	e00c      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e00a      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	e008      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e004      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	f002 0203 	and.w	r2, r2, #3
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ecc:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efe:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f28:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7c:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	f67f ae96 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40021400 	.word	0x40021400
 8000fc0:	40021800 	.word	0x40021800
 8000fc4:	40013c00 	.word	0x40013c00

08000fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0cc      	b.n	8001176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fdc:	4b68      	ldr	r3, [pc, #416]	; (8001180 <HAL_RCC_ClockConfig+0x1b8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d90c      	bls.n	8001004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff2:	4b63      	ldr	r3, [pc, #396]	; (8001180 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d001      	beq.n	8001004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e0b8      	b.n	8001176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d020      	beq.n	8001052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800101c:	4b59      	ldr	r3, [pc, #356]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a58      	ldr	r2, [pc, #352]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001034:	4b53      	ldr	r3, [pc, #332]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800103e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	494d      	ldr	r1, [pc, #308]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 800104e:	4313      	orrs	r3, r2
 8001050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d044      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d107      	bne.n	8001076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b47      	ldr	r3, [pc, #284]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d119      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e07f      	b.n	8001176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d003      	beq.n	8001086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001082:	2b03      	cmp	r3, #3
 8001084:	d107      	bne.n	8001096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e06f      	b.n	8001176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e067      	b.n	8001176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f023 0203 	bic.w	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4934      	ldr	r1, [pc, #208]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b8:	f7ff fd00 	bl	8000abc <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	e00a      	b.n	80010d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c0:	f7ff fcfc 	bl	8000abc <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e04f      	b.n	8001176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 020c 	and.w	r2, r3, #12
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d1eb      	bne.n	80010c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <HAL_RCC_ClockConfig+0x1b8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d20c      	bcs.n	8001110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <HAL_RCC_ClockConfig+0x1b8>)
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e032      	b.n	8001176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4916      	ldr	r1, [pc, #88]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	4313      	orrs	r3, r2
 800112c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	490e      	ldr	r1, [pc, #56]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800114e:	f000 f855 	bl	80011fc <HAL_RCC_GetSysClockFreq>
 8001152:	4602      	mov	r2, r0
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	490a      	ldr	r1, [pc, #40]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	5ccb      	ldrb	r3, [r1, r3]
 8001162:	fa22 f303 	lsr.w	r3, r2, r3
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_RCC_ClockConfig+0x1c8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fc60 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00
 8001184:	40023800 	.word	0x40023800
 8001188:	080027f0 	.word	0x080027f0
 800118c:	20000000 	.word	0x20000000
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000000 	.word	0x20000000

080011ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011b0:	f7ff fff0 	bl	8001194 <HAL_RCC_GetHCLKFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	0a9b      	lsrs	r3, r3, #10
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	08002800 	.word	0x08002800

080011d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011d8:	f7ff ffdc 	bl	8001194 <HAL_RCC_GetHCLKFreq>
 80011dc:	4602      	mov	r2, r0
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	0b5b      	lsrs	r3, r3, #13
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	4903      	ldr	r1, [pc, #12]	; (80011f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011ea:	5ccb      	ldrb	r3, [r1, r3]
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	08002800 	.word	0x08002800

080011fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001200:	b0ae      	sub	sp, #184	; 0xb8
 8001202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001222:	4bcb      	ldr	r3, [pc, #812]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b0c      	cmp	r3, #12
 800122c:	f200 8206 	bhi.w	800163c <HAL_RCC_GetSysClockFreq+0x440>
 8001230:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	0800126d 	.word	0x0800126d
 800123c:	0800163d 	.word	0x0800163d
 8001240:	0800163d 	.word	0x0800163d
 8001244:	0800163d 	.word	0x0800163d
 8001248:	08001275 	.word	0x08001275
 800124c:	0800163d 	.word	0x0800163d
 8001250:	0800163d 	.word	0x0800163d
 8001254:	0800163d 	.word	0x0800163d
 8001258:	0800127d 	.word	0x0800127d
 800125c:	0800163d 	.word	0x0800163d
 8001260:	0800163d 	.word	0x0800163d
 8001264:	0800163d 	.word	0x0800163d
 8001268:	0800146d 	.word	0x0800146d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800126c:	4bb9      	ldr	r3, [pc, #740]	; (8001554 <HAL_RCC_GetSysClockFreq+0x358>)
 800126e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001272:	e1e7      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001274:	4bb8      	ldr	r3, [pc, #736]	; (8001558 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800127a:	e1e3      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800127c:	4bb4      	ldr	r3, [pc, #720]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001288:	4bb1      	ldr	r3, [pc, #708]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d071      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001294:	4bae      	ldr	r3, [pc, #696]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	2200      	movs	r2, #0
 800129c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80012ba:	4622      	mov	r2, r4
 80012bc:	462b      	mov	r3, r5
 80012be:	f04f 0000 	mov.w	r0, #0
 80012c2:	f04f 0100 	mov.w	r1, #0
 80012c6:	0159      	lsls	r1, r3, #5
 80012c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012cc:	0150      	lsls	r0, r2, #5
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4621      	mov	r1, r4
 80012d4:	1a51      	subs	r1, r2, r1
 80012d6:	6439      	str	r1, [r7, #64]	; 0x40
 80012d8:	4629      	mov	r1, r5
 80012da:	eb63 0301 	sbc.w	r3, r3, r1
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80012ec:	4649      	mov	r1, r9
 80012ee:	018b      	lsls	r3, r1, #6
 80012f0:	4641      	mov	r1, r8
 80012f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012f6:	4641      	mov	r1, r8
 80012f8:	018a      	lsls	r2, r1, #6
 80012fa:	4641      	mov	r1, r8
 80012fc:	1a51      	subs	r1, r2, r1
 80012fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8001300:	4649      	mov	r1, r9
 8001302:	eb63 0301 	sbc.w	r3, r3, r1
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001314:	4649      	mov	r1, r9
 8001316:	00cb      	lsls	r3, r1, #3
 8001318:	4641      	mov	r1, r8
 800131a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800131e:	4641      	mov	r1, r8
 8001320:	00ca      	lsls	r2, r1, #3
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	4603      	mov	r3, r0
 8001328:	4622      	mov	r2, r4
 800132a:	189b      	adds	r3, r3, r2
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
 800132e:	462b      	mov	r3, r5
 8001330:	460a      	mov	r2, r1
 8001332:	eb42 0303 	adc.w	r3, r2, r3
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001344:	4629      	mov	r1, r5
 8001346:	024b      	lsls	r3, r1, #9
 8001348:	4621      	mov	r1, r4
 800134a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800134e:	4621      	mov	r1, r4
 8001350:	024a      	lsls	r2, r1, #9
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800135a:	2200      	movs	r2, #0
 800135c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001364:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001368:	f7fe ff4c 	bl	8000204 <__aeabi_uldivmod>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4613      	mov	r3, r2
 8001372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001376:	e067      	b.n	8001448 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001378:	4b75      	ldr	r3, [pc, #468]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	2200      	movs	r2, #0
 8001380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001384:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800138c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001390:	67bb      	str	r3, [r7, #120]	; 0x78
 8001392:	2300      	movs	r3, #0
 8001394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001396:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800139a:	4622      	mov	r2, r4
 800139c:	462b      	mov	r3, r5
 800139e:	f04f 0000 	mov.w	r0, #0
 80013a2:	f04f 0100 	mov.w	r1, #0
 80013a6:	0159      	lsls	r1, r3, #5
 80013a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ac:	0150      	lsls	r0, r2, #5
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4621      	mov	r1, r4
 80013b4:	1a51      	subs	r1, r2, r1
 80013b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80013b8:	4629      	mov	r1, r5
 80013ba:	eb63 0301 	sbc.w	r3, r3, r1
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80013cc:	4649      	mov	r1, r9
 80013ce:	018b      	lsls	r3, r1, #6
 80013d0:	4641      	mov	r1, r8
 80013d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013d6:	4641      	mov	r1, r8
 80013d8:	018a      	lsls	r2, r1, #6
 80013da:	4641      	mov	r1, r8
 80013dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80013e0:	4649      	mov	r1, r9
 80013e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013fa:	4692      	mov	sl, r2
 80013fc:	469b      	mov	fp, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	eb1a 0303 	adds.w	r3, sl, r3
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	462b      	mov	r3, r5
 8001408:	eb4b 0303 	adc.w	r3, fp, r3
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800141a:	4629      	mov	r1, r5
 800141c:	028b      	lsls	r3, r1, #10
 800141e:	4621      	mov	r1, r4
 8001420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001424:	4621      	mov	r1, r4
 8001426:	028a      	lsls	r2, r1, #10
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001430:	2200      	movs	r2, #0
 8001432:	673b      	str	r3, [r7, #112]	; 0x70
 8001434:	677a      	str	r2, [r7, #116]	; 0x74
 8001436:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800143a:	f7fe fee3 	bl	8000204 <__aeabi_uldivmod>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4613      	mov	r3, r2
 8001444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001448:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	0c1b      	lsrs	r3, r3, #16
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	3301      	adds	r3, #1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800145a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800145e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800146a:	e0eb      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146c:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d06b      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_RCC_GetSysClockFreq+0x354>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	2200      	movs	r2, #0
 800148c:	66bb      	str	r3, [r7, #104]	; 0x68
 800148e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001496:	663b      	str	r3, [r7, #96]	; 0x60
 8001498:	2300      	movs	r3, #0
 800149a:	667b      	str	r3, [r7, #100]	; 0x64
 800149c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80014a0:	4622      	mov	r2, r4
 80014a2:	462b      	mov	r3, r5
 80014a4:	f04f 0000 	mov.w	r0, #0
 80014a8:	f04f 0100 	mov.w	r1, #0
 80014ac:	0159      	lsls	r1, r3, #5
 80014ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014b2:	0150      	lsls	r0, r2, #5
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4621      	mov	r1, r4
 80014ba:	1a51      	subs	r1, r2, r1
 80014bc:	61b9      	str	r1, [r7, #24]
 80014be:	4629      	mov	r1, r5
 80014c0:	eb63 0301 	sbc.w	r3, r3, r1
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014d2:	4659      	mov	r1, fp
 80014d4:	018b      	lsls	r3, r1, #6
 80014d6:	4651      	mov	r1, sl
 80014d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014dc:	4651      	mov	r1, sl
 80014de:	018a      	lsls	r2, r1, #6
 80014e0:	4651      	mov	r1, sl
 80014e2:	ebb2 0801 	subs.w	r8, r2, r1
 80014e6:	4659      	mov	r1, fp
 80014e8:	eb63 0901 	sbc.w	r9, r3, r1
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001500:	4690      	mov	r8, r2
 8001502:	4699      	mov	r9, r3
 8001504:	4623      	mov	r3, r4
 8001506:	eb18 0303 	adds.w	r3, r8, r3
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	462b      	mov	r3, r5
 800150e:	eb49 0303 	adc.w	r3, r9, r3
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001520:	4629      	mov	r1, r5
 8001522:	024b      	lsls	r3, r1, #9
 8001524:	4621      	mov	r1, r4
 8001526:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800152a:	4621      	mov	r1, r4
 800152c:	024a      	lsls	r2, r1, #9
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001536:	2200      	movs	r2, #0
 8001538:	65bb      	str	r3, [r7, #88]	; 0x58
 800153a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800153c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001540:	f7fe fe60 	bl	8000204 <__aeabi_uldivmod>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4613      	mov	r3, r2
 800154a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800154e:	e065      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x420>
 8001550:	40023800 	.word	0x40023800
 8001554:	00f42400 	.word	0x00f42400
 8001558:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800155c:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_RCC_GetSysClockFreq+0x458>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	099b      	lsrs	r3, r3, #6
 8001562:	2200      	movs	r2, #0
 8001564:	4618      	mov	r0, r3
 8001566:	4611      	mov	r1, r2
 8001568:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800156c:	653b      	str	r3, [r7, #80]	; 0x50
 800156e:	2300      	movs	r3, #0
 8001570:	657b      	str	r3, [r7, #84]	; 0x54
 8001572:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001576:	4642      	mov	r2, r8
 8001578:	464b      	mov	r3, r9
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	0159      	lsls	r1, r3, #5
 8001584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001588:	0150      	lsls	r0, r2, #5
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4641      	mov	r1, r8
 8001590:	1a51      	subs	r1, r2, r1
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	4649      	mov	r1, r9
 8001596:	eb63 0301 	sbc.w	r3, r3, r1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80015a8:	4659      	mov	r1, fp
 80015aa:	018b      	lsls	r3, r1, #6
 80015ac:	4651      	mov	r1, sl
 80015ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015b2:	4651      	mov	r1, sl
 80015b4:	018a      	lsls	r2, r1, #6
 80015b6:	4651      	mov	r1, sl
 80015b8:	1a54      	subs	r4, r2, r1
 80015ba:	4659      	mov	r1, fp
 80015bc:	eb63 0501 	sbc.w	r5, r3, r1
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	00eb      	lsls	r3, r5, #3
 80015ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ce:	00e2      	lsls	r2, r4, #3
 80015d0:	4614      	mov	r4, r2
 80015d2:	461d      	mov	r5, r3
 80015d4:	4643      	mov	r3, r8
 80015d6:	18e3      	adds	r3, r4, r3
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	464b      	mov	r3, r9
 80015dc:	eb45 0303 	adc.w	r3, r5, r3
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ee:	4629      	mov	r1, r5
 80015f0:	028b      	lsls	r3, r1, #10
 80015f2:	4621      	mov	r1, r4
 80015f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015f8:	4621      	mov	r1, r4
 80015fa:	028a      	lsls	r2, r1, #10
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001604:	2200      	movs	r2, #0
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
 8001608:	64fa      	str	r2, [r7, #76]	; 0x4c
 800160a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800160e:	f7fe fdf9 	bl	8000204 <__aeabi_uldivmod>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4613      	mov	r3, r2
 8001618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_RCC_GetSysClockFreq+0x458>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0f1b      	lsrs	r3, r3, #28
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800162a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800162e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800163a:	e003      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_GetSysClockFreq+0x45c>)
 800163e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001648:	4618      	mov	r0, r3
 800164a:	37b8      	adds	r7, #184	; 0xb8
 800164c:	46bd      	mov	sp, r7
 800164e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	00f42400 	.word	0x00f42400

0800165c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e28d      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8083 	beq.w	8001782 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800167c:	4b94      	ldr	r3, [pc, #592]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b04      	cmp	r3, #4
 8001686:	d019      	beq.n	80016bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001688:	4b91      	ldr	r3, [pc, #580]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001690:	2b08      	cmp	r3, #8
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001694:	4b8e      	ldr	r3, [pc, #568]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a0:	d00c      	beq.n	80016bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a2:	4b8b      	ldr	r3, [pc, #556]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05b      	beq.n	8001780 <HAL_RCC_OscConfig+0x124>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d157      	bne.n	8001780 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e25a      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x90>
 80016de:	4b7c      	ldr	r3, [pc, #496]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7b      	ldr	r2, [pc, #492]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01d      	b.n	8001728 <HAL_RCC_OscConfig+0xcc>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0xb4>
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a75      	ldr	r2, [pc, #468]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b73      	ldr	r3, [pc, #460]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a72      	ldr	r2, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0xcc>
 8001710:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a6e      	ldr	r2, [pc, #440]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b6c      	ldr	r3, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6b      	ldr	r2, [pc, #428]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff f9c4 	bl	8000abc <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff f9c0 	bl	8000abc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e21f      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b61      	ldr	r3, [pc, #388]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xdc>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff f9b0 	bl	8000abc <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff f9ac 	bl	8000abc <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e20b      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x104>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d06f      	beq.n	800186e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800178e:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b00      	cmp	r3, #0
 8001798:	d017      	beq.n	80017ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800179a:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d105      	bne.n	80017b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d11c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x186>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1d3      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4937      	ldr	r1, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	e03a      	b.n	800186e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <HAL_RCC_OscConfig+0x278>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff f959 	bl	8000abc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff f955 	bl	8000abc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1b4      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4925      	ldr	r1, [pc, #148]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e015      	b.n	800186e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x278>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff f938 	bl	8000abc <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff f934 	bl	8000abc <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e193      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d036      	beq.n	80018e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_RCC_OscConfig+0x27c>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff f918 	bl	8000abc <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff f914 	bl	8000abc <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e173      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80018a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x234>
 80018ae:	e01b      	b.n	80018e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_OscConfig+0x27c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff f901 	bl	8000abc <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	e00e      	b.n	80018dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018be:	f7ff f8fd 	bl	8000abc <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d907      	bls.n	80018dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e15c      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
 80018d0:	40023800 	.word	0x40023800
 80018d4:	42470000 	.word	0x42470000
 80018d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 80018de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ea      	bne.n	80018be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8097 	beq.w	8001a24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b83      	ldr	r3, [pc, #524]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a7e      	ldr	r2, [pc, #504]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b7c      	ldr	r3, [pc, #496]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001926:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_RCC_OscConfig+0x4b0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <HAL_RCC_OscConfig+0x4b0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a75      	ldr	r2, [pc, #468]	; (8001b0c <HAL_RCC_OscConfig+0x4b0>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193e:	f7ff f8bd 	bl	8000abc <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7ff f8b9 	bl	8000abc <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e118      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	4b6c      	ldr	r3, [pc, #432]	; (8001b0c <HAL_RCC_OscConfig+0x4b0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x31e>
 800196c:	4b66      	ldr	r3, [pc, #408]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a65      	ldr	r2, [pc, #404]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	e01c      	b.n	80019b4 <HAL_RCC_OscConfig+0x358>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b05      	cmp	r3, #5
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x340>
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a60      	ldr	r2, [pc, #384]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	4b5e      	ldr	r3, [pc, #376]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a5d      	ldr	r2, [pc, #372]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x358>
 800199c:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
 80019a8:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ac:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 80019ae:	f023 0304 	bic.w	r3, r3, #4
 80019b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff f87e 	bl	8000abc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f7ff f87a 	bl	8000abc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0d7      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0ee      	beq.n	80019c4 <HAL_RCC_OscConfig+0x368>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f868 	bl	8000abc <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff f864 	bl	8000abc <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0c1      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ee      	bne.n	80019f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a3a      	ldr	r2, [pc, #232]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80ad 	beq.w	8001b88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d060      	beq.n	8001afc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d145      	bne.n	8001ace <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_RCC_OscConfig+0x4b4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f838 	bl	8000abc <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff f834 	bl	8000abc <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e093      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	019b      	lsls	r3, r3, #6
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	071b      	lsls	r3, r3, #28
 8001a9a:	491b      	ldr	r1, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x4b4>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f809 	bl	8000abc <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f805 	bl	8000abc <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e064      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x452>
 8001acc:	e05c      	b.n	8001b88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x4b4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fff2 	bl	8000abc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe ffee 	bl	8000abc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e04d      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x480>
 8001afa:	e045      	b.n	8001b88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e040      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_RCC_OscConfig+0x538>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d030      	beq.n	8001b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d129      	bne.n	8001b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d122      	bne.n	8001b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d119      	bne.n	8001b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d10f      	bne.n	8001b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fe22 	bl	8000808 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f8ca 	bl	8001d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_TIM_IC_ConfigChannel+0x1e>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e088      	b.n	8001d66 <HAL_TIM_IC_ConfigChannel+0x130>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11b      	bne.n	8001c9a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f000 f91d 	bl	8001eb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 020c 	bic.w	r2, r2, #12
 8001c84:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6999      	ldr	r1, [r3, #24]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	619a      	str	r2, [r3, #24]
 8001c98:	e060      	b.n	8001d5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d11c      	bne.n	8001cda <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f000 f972 	bl	8001f98 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001cc2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6999      	ldr	r1, [r3, #24]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	021a      	lsls	r2, r3, #8
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	619a      	str	r2, [r3, #24]
 8001cd8:	e040      	b.n	8001d5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f000 f98f 	bl	8002012 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 020c 	bic.w	r2, r2, #12
 8001d02:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69d9      	ldr	r1, [r3, #28]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	61da      	str	r2, [r3, #28]
 8001d16:	e021      	b.n	8001d5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d11c      	bne.n	8001d58 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f000 f9ac 	bl	800208a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69d9      	ldr	r1, [r3, #28]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	021a      	lsls	r2, r3, #8
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	61da      	str	r2, [r3, #28]
 8001d56:	e001      	b.n	8001d5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a40      	ldr	r2, [pc, #256]	; (8001e84 <TIM_Base_SetConfig+0x114>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d013      	beq.n	8001db0 <TIM_Base_SetConfig+0x40>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d00f      	beq.n	8001db0 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a3d      	ldr	r2, [pc, #244]	; (8001e88 <TIM_Base_SetConfig+0x118>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00b      	beq.n	8001db0 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <TIM_Base_SetConfig+0x11c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d007      	beq.n	8001db0 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3b      	ldr	r2, [pc, #236]	; (8001e90 <TIM_Base_SetConfig+0x120>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d003      	beq.n	8001db0 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <TIM_Base_SetConfig+0x124>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d108      	bne.n	8001dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <TIM_Base_SetConfig+0x114>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02b      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d027      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <TIM_Base_SetConfig+0x118>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d023      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <TIM_Base_SetConfig+0x11c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <TIM_Base_SetConfig+0x120>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01b      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <TIM_Base_SetConfig+0x124>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d017      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a28      	ldr	r2, [pc, #160]	; (8001e98 <TIM_Base_SetConfig+0x128>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <TIM_Base_SetConfig+0x12c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00f      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <TIM_Base_SetConfig+0x130>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00b      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a25      	ldr	r2, [pc, #148]	; (8001ea4 <TIM_Base_SetConfig+0x134>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <TIM_Base_SetConfig+0x138>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <TIM_Base_SetConfig+0x13c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <TIM_Base_SetConfig+0x114>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <TIM_Base_SetConfig+0xf8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <TIM_Base_SetConfig+0x124>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d103      	bne.n	8001e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	615a      	str	r2, [r3, #20]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40000c00 	.word	0x40000c00
 8001e94:	40010400 	.word	0x40010400
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	40014400 	.word	0x40014400
 8001ea0:	40014800 	.word	0x40014800
 8001ea4:	40001800 	.word	0x40001800
 8001ea8:	40001c00 	.word	0x40001c00
 8001eac:	40002000 	.word	0x40002000

08001eb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f023 0201 	bic.w	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <TIM_TI1_SetConfig+0xcc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01b      	beq.n	8001f16 <TIM_TI1_SetConfig+0x66>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d017      	beq.n	8001f16 <TIM_TI1_SetConfig+0x66>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	; (8001f80 <TIM_TI1_SetConfig+0xd0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <TIM_TI1_SetConfig+0x66>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <TIM_TI1_SetConfig+0xd4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00f      	beq.n	8001f16 <TIM_TI1_SetConfig+0x66>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <TIM_TI1_SetConfig+0xd8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00b      	beq.n	8001f16 <TIM_TI1_SetConfig+0x66>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <TIM_TI1_SetConfig+0xdc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <TIM_TI1_SetConfig+0x66>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <TIM_TI1_SetConfig+0xe0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d003      	beq.n	8001f16 <TIM_TI1_SetConfig+0x66>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <TIM_TI1_SetConfig+0xe4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <TIM_TI1_SetConfig+0x6a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <TIM_TI1_SetConfig+0x6c>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e003      	b.n	8001f3a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f023 030a 	bic.w	r3, r3, #10
 8001f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 030a 	and.w	r3, r3, #10
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	621a      	str	r2, [r3, #32]
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40010400 	.word	0x40010400
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40001800 	.word	0x40001800

08001f98 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	f023 0210 	bic.w	r2, r3, #16
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	031b      	lsls	r3, r3, #12
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	621a      	str	r2, [r3, #32]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002012:	b480      	push	{r7}
 8002014:	b087      	sub	sp, #28
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800204e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	b2db      	uxtb	r3, r3
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002062:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	621a      	str	r2, [r3, #32]
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800208a:	b480      	push	{r7}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	031b      	lsls	r3, r3, #12
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80020dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	031b      	lsls	r3, r3, #12
 80020e2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	621a      	str	r2, [r3, #32]
}
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002118:	2302      	movs	r3, #2
 800211a:	e05a      	b.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d01d      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10c      	bne.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00
 80021f0:	40010400 	.word	0x40010400
 80021f4:	40014000 	.word	0x40014000
 80021f8:	40001800 	.word	0x40001800

080021fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e03f      	b.n	800228e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fb36 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800223e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f829 	bl	8002298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b0c0      	sub	sp, #256	; 0x100
 800229e:	af00      	add	r7, sp, #0
 80022a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	68d9      	ldr	r1, [r3, #12]
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	ea40 0301 	orr.w	r3, r0, r1
 80022c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022f0:	f021 010c 	bic.w	r1, r1, #12
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022fe:	430b      	orrs	r3, r1
 8002300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002312:	6999      	ldr	r1, [r3, #24]
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	ea40 0301 	orr.w	r3, r0, r1
 800231e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <UART_SetConfig+0x2cc>)
 8002328:	429a      	cmp	r2, r3
 800232a:	d005      	beq.n	8002338 <UART_SetConfig+0xa0>
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b8d      	ldr	r3, [pc, #564]	; (8002568 <UART_SetConfig+0x2d0>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d104      	bne.n	8002342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002338:	f7fe ff4c 	bl	80011d4 <HAL_RCC_GetPCLK2Freq>
 800233c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002340:	e003      	b.n	800234a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002342:	f7fe ff33 	bl	80011ac <HAL_RCC_GetPCLK1Freq>
 8002346:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800234a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002354:	f040 810c 	bne.w	8002570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235c:	2200      	movs	r2, #0
 800235e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002362:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	1891      	adds	r1, r2, r2
 8002370:	65b9      	str	r1, [r7, #88]	; 0x58
 8002372:	415b      	adcs	r3, r3
 8002374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800237a:	4621      	mov	r1, r4
 800237c:	eb12 0801 	adds.w	r8, r2, r1
 8002380:	4629      	mov	r1, r5
 8002382:	eb43 0901 	adc.w	r9, r3, r1
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800239a:	4690      	mov	r8, r2
 800239c:	4699      	mov	r9, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	eb18 0303 	adds.w	r3, r8, r3
 80023a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023a8:	462b      	mov	r3, r5
 80023aa:	eb49 0303 	adc.w	r3, r9, r3
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023c6:	460b      	mov	r3, r1
 80023c8:	18db      	adds	r3, r3, r3
 80023ca:	653b      	str	r3, [r7, #80]	; 0x50
 80023cc:	4613      	mov	r3, r2
 80023ce:	eb42 0303 	adc.w	r3, r2, r3
 80023d2:	657b      	str	r3, [r7, #84]	; 0x54
 80023d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80023dc:	f7fd ff12 	bl	8000204 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <UART_SetConfig+0x2d4>)
 80023e6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	011c      	lsls	r4, r3, #4
 80023ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	1891      	adds	r1, r2, r2
 8002406:	64b9      	str	r1, [r7, #72]	; 0x48
 8002408:	415b      	adcs	r3, r3
 800240a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800240c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002410:	4641      	mov	r1, r8
 8002412:	eb12 0a01 	adds.w	sl, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb43 0b01 	adc.w	fp, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800242c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002430:	4692      	mov	sl, r2
 8002432:	469b      	mov	fp, r3
 8002434:	4643      	mov	r3, r8
 8002436:	eb1a 0303 	adds.w	r3, sl, r3
 800243a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800243e:	464b      	mov	r3, r9
 8002440:	eb4b 0303 	adc.w	r3, fp, r3
 8002444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002454:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800245c:	460b      	mov	r3, r1
 800245e:	18db      	adds	r3, r3, r3
 8002460:	643b      	str	r3, [r7, #64]	; 0x40
 8002462:	4613      	mov	r3, r2
 8002464:	eb42 0303 	adc.w	r3, r2, r3
 8002468:	647b      	str	r3, [r7, #68]	; 0x44
 800246a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800246e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002472:	f7fd fec7 	bl	8000204 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4611      	mov	r1, r2
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <UART_SetConfig+0x2d4>)
 800247e:	fba3 2301 	umull	r2, r3, r3, r1
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2264      	movs	r2, #100	; 0x64
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <UART_SetConfig+0x2d4>)
 8002494:	fba3 2302 	umull	r2, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024a0:	441c      	add	r4, r3
 80024a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80024bc:	415b      	adcs	r3, r3
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024c4:	4641      	mov	r1, r8
 80024c6:	1851      	adds	r1, r2, r1
 80024c8:	6339      	str	r1, [r7, #48]	; 0x30
 80024ca:	4649      	mov	r1, r9
 80024cc:	414b      	adcs	r3, r1
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80024dc:	4659      	mov	r1, fp
 80024de:	00cb      	lsls	r3, r1, #3
 80024e0:	4651      	mov	r1, sl
 80024e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024e6:	4651      	mov	r1, sl
 80024e8:	00ca      	lsls	r2, r1, #3
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	4642      	mov	r2, r8
 80024f2:	189b      	adds	r3, r3, r2
 80024f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024f8:	464b      	mov	r3, r9
 80024fa:	460a      	mov	r2, r1
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002510:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002518:	460b      	mov	r3, r1
 800251a:	18db      	adds	r3, r3, r3
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
 800251e:	4613      	mov	r3, r2
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800252a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800252e:	f7fd fe69 	bl	8000204 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <UART_SetConfig+0x2d4>)
 8002538:	fba3 1302 	umull	r1, r3, r3, r2
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	2164      	movs	r1, #100	; 0x64
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	3332      	adds	r3, #50	; 0x32
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <UART_SetConfig+0x2d4>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	f003 0207 	and.w	r2, r3, #7
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4422      	add	r2, r4
 800255e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002560:	e105      	b.n	800276e <UART_SetConfig+0x4d6>
 8002562:	bf00      	nop
 8002564:	40011000 	.word	0x40011000
 8002568:	40011400 	.word	0x40011400
 800256c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800257a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800257e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002582:	4642      	mov	r2, r8
 8002584:	464b      	mov	r3, r9
 8002586:	1891      	adds	r1, r2, r2
 8002588:	6239      	str	r1, [r7, #32]
 800258a:	415b      	adcs	r3, r3
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002592:	4641      	mov	r1, r8
 8002594:	1854      	adds	r4, r2, r1
 8002596:	4649      	mov	r1, r9
 8002598:	eb43 0501 	adc.w	r5, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	00eb      	lsls	r3, r5, #3
 80025a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025aa:	00e2      	lsls	r2, r4, #3
 80025ac:	4614      	mov	r4, r2
 80025ae:	461d      	mov	r5, r3
 80025b0:	4643      	mov	r3, r8
 80025b2:	18e3      	adds	r3, r4, r3
 80025b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b8:	464b      	mov	r3, r9
 80025ba:	eb45 0303 	adc.w	r3, r5, r3
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025de:	4629      	mov	r1, r5
 80025e0:	008b      	lsls	r3, r1, #2
 80025e2:	4621      	mov	r1, r4
 80025e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025e8:	4621      	mov	r1, r4
 80025ea:	008a      	lsls	r2, r1, #2
 80025ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025f0:	f7fd fe08 	bl	8000204 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4b60      	ldr	r3, [pc, #384]	; (800277c <UART_SetConfig+0x4e4>)
 80025fa:	fba3 2302 	umull	r2, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	011c      	lsls	r4, r3, #4
 8002602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800260c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	1891      	adds	r1, r2, r2
 800261a:	61b9      	str	r1, [r7, #24]
 800261c:	415b      	adcs	r3, r3
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002624:	4641      	mov	r1, r8
 8002626:	1851      	adds	r1, r2, r1
 8002628:	6139      	str	r1, [r7, #16]
 800262a:	4649      	mov	r1, r9
 800262c:	414b      	adcs	r3, r1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800263c:	4659      	mov	r1, fp
 800263e:	00cb      	lsls	r3, r1, #3
 8002640:	4651      	mov	r1, sl
 8002642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002646:	4651      	mov	r1, sl
 8002648:	00ca      	lsls	r2, r1, #3
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4603      	mov	r3, r0
 8002650:	4642      	mov	r2, r8
 8002652:	189b      	adds	r3, r3, r2
 8002654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002658:	464b      	mov	r3, r9
 800265a:	460a      	mov	r2, r1
 800265c:	eb42 0303 	adc.w	r3, r2, r3
 8002660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	67bb      	str	r3, [r7, #120]	; 0x78
 800266e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800267c:	4649      	mov	r1, r9
 800267e:	008b      	lsls	r3, r1, #2
 8002680:	4641      	mov	r1, r8
 8002682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002686:	4641      	mov	r1, r8
 8002688:	008a      	lsls	r2, r1, #2
 800268a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800268e:	f7fd fdb9 	bl	8000204 <__aeabi_uldivmod>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <UART_SetConfig+0x4e4>)
 8002698:	fba3 1302 	umull	r1, r3, r3, r2
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	2164      	movs	r1, #100	; 0x64
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	3332      	adds	r3, #50	; 0x32
 80026aa:	4a34      	ldr	r2, [pc, #208]	; (800277c <UART_SetConfig+0x4e4>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b6:	441c      	add	r4, r3
 80026b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026bc:	2200      	movs	r2, #0
 80026be:	673b      	str	r3, [r7, #112]	; 0x70
 80026c0:	677a      	str	r2, [r7, #116]	; 0x74
 80026c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026c6:	4642      	mov	r2, r8
 80026c8:	464b      	mov	r3, r9
 80026ca:	1891      	adds	r1, r2, r2
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	415b      	adcs	r3, r3
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d6:	4641      	mov	r1, r8
 80026d8:	1851      	adds	r1, r2, r1
 80026da:	6039      	str	r1, [r7, #0]
 80026dc:	4649      	mov	r1, r9
 80026de:	414b      	adcs	r3, r1
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026ee:	4659      	mov	r1, fp
 80026f0:	00cb      	lsls	r3, r1, #3
 80026f2:	4651      	mov	r1, sl
 80026f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f8:	4651      	mov	r1, sl
 80026fa:	00ca      	lsls	r2, r1, #3
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	4603      	mov	r3, r0
 8002702:	4642      	mov	r2, r8
 8002704:	189b      	adds	r3, r3, r2
 8002706:	66bb      	str	r3, [r7, #104]	; 0x68
 8002708:	464b      	mov	r3, r9
 800270a:	460a      	mov	r2, r1
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	663b      	str	r3, [r7, #96]	; 0x60
 800271c:	667a      	str	r2, [r7, #100]	; 0x64
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800272a:	4649      	mov	r1, r9
 800272c:	008b      	lsls	r3, r1, #2
 800272e:	4641      	mov	r1, r8
 8002730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002734:	4641      	mov	r1, r8
 8002736:	008a      	lsls	r2, r1, #2
 8002738:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800273c:	f7fd fd62 	bl	8000204 <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <UART_SetConfig+0x4e4>)
 8002746:	fba3 1302 	umull	r1, r3, r3, r2
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2164      	movs	r1, #100	; 0x64
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	3332      	adds	r3, #50	; 0x32
 8002758:	4a08      	ldr	r2, [pc, #32]	; (800277c <UART_SetConfig+0x4e4>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4422      	add	r2, r4
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	bf00      	nop
 8002770:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277a:	bf00      	nop
 800277c:	51eb851f 	.word	0x51eb851f

08002780 <__libc_init_array>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	4d0d      	ldr	r5, [pc, #52]	; (80027b8 <__libc_init_array+0x38>)
 8002784:	4c0d      	ldr	r4, [pc, #52]	; (80027bc <__libc_init_array+0x3c>)
 8002786:	1b64      	subs	r4, r4, r5
 8002788:	10a4      	asrs	r4, r4, #2
 800278a:	2600      	movs	r6, #0
 800278c:	42a6      	cmp	r6, r4
 800278e:	d109      	bne.n	80027a4 <__libc_init_array+0x24>
 8002790:	4d0b      	ldr	r5, [pc, #44]	; (80027c0 <__libc_init_array+0x40>)
 8002792:	4c0c      	ldr	r4, [pc, #48]	; (80027c4 <__libc_init_array+0x44>)
 8002794:	f000 f820 	bl	80027d8 <_init>
 8002798:	1b64      	subs	r4, r4, r5
 800279a:	10a4      	asrs	r4, r4, #2
 800279c:	2600      	movs	r6, #0
 800279e:	42a6      	cmp	r6, r4
 80027a0:	d105      	bne.n	80027ae <__libc_init_array+0x2e>
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a8:	4798      	blx	r3
 80027aa:	3601      	adds	r6, #1
 80027ac:	e7ee      	b.n	800278c <__libc_init_array+0xc>
 80027ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b2:	4798      	blx	r3
 80027b4:	3601      	adds	r6, #1
 80027b6:	e7f2      	b.n	800279e <__libc_init_array+0x1e>
 80027b8:	08002810 	.word	0x08002810
 80027bc:	08002810 	.word	0x08002810
 80027c0:	08002810 	.word	0x08002810
 80027c4:	08002814 	.word	0x08002814

080027c8 <memset>:
 80027c8:	4402      	add	r2, r0
 80027ca:	4603      	mov	r3, r0
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d100      	bne.n	80027d2 <memset+0xa>
 80027d0:	4770      	bx	lr
 80027d2:	f803 1b01 	strb.w	r1, [r3], #1
 80027d6:	e7f9      	b.n	80027cc <memset+0x4>

080027d8 <_init>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr

080027e4 <_fini>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr
